package do_an_1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class PanelSanPham extends JPanel {
    private List<SanPham> dsSanPham;
    private JTable table;
    private JTextField txtMaSP, txtTen, txtHang, txtGia, txtSoLuong, txtChip, txtSoCamera, txtDungLuongPin, txtKichThuocManHinh;
    private JTextField txtHinhMinhHoa;
    private JLabel lblChiTietMaSP, lblChiTietTen, lblChiTietHang, lblChiTietGia, lblChiTietSoLuong, lblChiTietChip, lblChiTietSoCamera, lblChiTietDungLuongPin, lblChiTietKichThuocManHinh, lblChiTietHinhMinhHoa, lblChiTietSoLuongDaBan;
    private JPanel formPanel;
    private DataManager<SanPham> dataManager;
    private DataManager<HoaDon> hoaDonDataManager;
    private boolean isEditing = false;

    private String formatPrice(double price) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(price) + " VND";
    }

    public PanelSanPham() {
        setBackground(Color.decode("#F8EAD9"));
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        dataManager = new FileDataManager<>();
        hoaDonDataManager = new FileDataManager<>();
        dsSanPham = new ArrayList<>();
        try {
            dsSanPham = dataManager.loadFromFile("sanpham.dat");
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file sản phẩm: " + e.getMessage());
        }

        // Nút điều khiển
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton btnShowForm = new JButton("Thêm sản phẩm");
        JButton btnSua = new JButton("Sửa sản phẩm");
        JButton btnXoa = new JButton("Xóa sản phẩm");

        btnShowForm.addActionListener(e -> {
            formPanel.setVisible(true);
            clearForm();
            isEditing = false;
        });
        btnSua.addActionListener(e -> chuanBiSuaSanPham());
        btnXoa.addActionListener(e -> xoaSanPham());

        buttonPanel.add(btnShowForm);
        buttonPanel.add(btnSua);
        buttonPanel.add(btnXoa);
        add(buttonPanel, BorderLayout.NORTH);

        // Bảng hiển thị sản phẩm
        String[] columns = {"Mã SP", "Tên", "Hãng", "Giá", "Số lượng", "Đã bán"};
        Object[][] data = new Object[dsSanPham.size()][6];
        for (int i = 0; i < dsSanPham.size(); i++) {
            SanPham sp = dsSanPham.get(i);
            int soLuongDaBan = tinhSoLuongDaBan(sp.getMaSP());
            data[i] = new Object[]{sp.getMaSP(), sp.getTen(), sp.getHang(), formatPrice(sp.getGia()), sp.getSoLuong(), soLuongDaBan};
        }
        table = new JTable(data, columns);
        table.setFillsViewportHeight(true);
        JScrollPane tableScrollPane = new JScrollPane(table);
        add(tableScrollPane, BorderLayout.CENTER);

        // Form nhập liệu
        formPanel = new JPanel(new GridLayout(11, 2, 5, 5));
        formPanel.add(new JLabel("Mã SP:"));
        txtMaSP = new JTextField();
        formPanel.add(txtMaSP);
        formPanel.add(new JLabel("Tên:"));
        txtTen = new JTextField();
        formPanel.add(txtTen);
        formPanel.add(new JLabel("Hãng:"));
        txtHang = new JTextField();
        formPanel.add(txtHang);
        formPanel.add(new JLabel("Giá:"));
        txtGia = new JTextField();
        formPanel.add(txtGia);
        formPanel.add(new JLabel("Số lượng:"));
        txtSoLuong = new JTextField();
        formPanel.add(txtSoLuong);
        formPanel.add(new JLabel("Chip:"));
        txtChip = new JTextField();
        formPanel.add(txtChip);
        formPanel.add(new JLabel("Số camera:"));
        txtSoCamera = new JTextField();
        formPanel.add(txtSoCamera);
        formPanel.add(new JLabel("Dung lượng pin (mAh):"));
        txtDungLuongPin = new JTextField();
        formPanel.add(txtDungLuongPin);
        formPanel.add(new JLabel("Kích thước màn hình (inch):"));
        txtKichThuocManHinh = new JTextField();
        formPanel.add(txtKichThuocManHinh);

        // Thêm panel con cho hình minh họa
        formPanel.add(new JLabel("Hình minh họa:"));
        JPanel hinhPanel = new JPanel(new BorderLayout());
        txtHinhMinhHoa = new JTextField();
        txtHinhMinhHoa.setEditable(false);
        JButton btnChonAnh = new JButton("Chọn ảnh");
        btnChonAnh.addActionListener(e -> chonAnh());
        hinhPanel.add(txtHinhMinhHoa, BorderLayout.CENTER);
        hinhPanel.add(btnChonAnh, BorderLayout.EAST);
        formPanel.add(hinhPanel);

        JPanel formButtonPanel = new JPanel(new FlowLayout());
        JButton btnThem = new JButton("Xác nhận");
        JButton btnHuy = new JButton("Hủy");
        JButton btnThoat = new JButton("Thoát");

        btnThem.addActionListener(e -> {
            if (isEditing) {
                suaSanPham();
            } else {
                themSanPham();
            }
        });
        btnHuy.addActionListener(e -> {
            formPanel.setVisible(false);
            clearForm();
            clearDetailPanel();
            isEditing = false;
        });
        btnThoat.addActionListener(e -> {
            formPanel.setVisible(false);
            clearForm();
            clearDetailPanel();
            isEditing = false;
        });

        formButtonPanel.add(btnThem);
        formButtonPanel.add(btnHuy);
        formButtonPanel.add(btnThoat);
        formPanel.add(new JLabel(""));
        formPanel.add(formButtonPanel);

        add(formPanel, BorderLayout.WEST);
        formPanel.setVisible(false);

        // Panel hiển thị chi tiết sản phẩm
        JPanel detailPanel = new JPanel(new GridLayout(11, 2, 5, 5));
        detailPanel.setBorder(BorderFactory.createTitledBorder("Chi tiết sản phẩm"));

        detailPanel.add(new JLabel("Mã SP:"));
        lblChiTietMaSP = new JLabel("");
        detailPanel.add(lblChiTietMaSP);

        detailPanel.add(new JLabel("Tên:"));
        lblChiTietTen = new JLabel("");
        detailPanel.add(lblChiTietTen);

        detailPanel.add(new JLabel("Hãng:"));
        lblChiTietHang = new JLabel("");
        detailPanel.add(lblChiTietHang);

        detailPanel.add(new JLabel("Giá:"));
        lblChiTietGia = new JLabel("");
        detailPanel.add(lblChiTietGia);

        detailPanel.add(new JLabel("Số lượng:"));
        lblChiTietSoLuong = new JLabel("");
        detailPanel.add(lblChiTietSoLuong);

        detailPanel.add(new JLabel("Số lượng đã bán:"));
        lblChiTietSoLuongDaBan = new JLabel("");
        detailPanel.add(lblChiTietSoLuongDaBan);

        detailPanel.add(new JLabel("Chip:"));
        lblChiTietChip = new JLabel("");
        detailPanel.add(lblChiTietChip);

        detailPanel.add(new JLabel("Số camera:"));
        lblChiTietSoCamera = new JLabel("");
        detailPanel.add(lblChiTietSoCamera);

        detailPanel.add(new JLabel("Dung lượng pin (mAh):"));
        lblChiTietDungLuongPin = new JLabel("");
        detailPanel.add(lblChiTietDungLuongPin);

        detailPanel.add(new JLabel("Kích thước màn hình (inch):"));
        lblChiTietKichThuocManHinh = new JLabel("");
        detailPanel.add(lblChiTietKichThuocManHinh);

        detailPanel.add(new JLabel("Hình minh họa:"));
        lblChiTietHinhMinhHoa = new JLabel("");
        detailPanel.add(lblChiTietHinhMinhHoa);

        add(detailPanel, BorderLayout.SOUTH);

        // Sự kiện nhấn chuột vào bảng
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = table.rowAtPoint(e.getPoint());
                if (row != -1) {
                    // Cập nhật thông tin chi tiết khi nhấn chuột
                    SanPham sp = dsSanPham.get(row);
                    lblChiTietMaSP.setText(sp.getMaSP());
                    lblChiTietTen.setText(sp.getTen());
                    lblChiTietHang.setText(sp.getHang());
                    lblChiTietGia.setText(formatPrice(sp.getGia()));
                    lblChiTietSoLuong.setText(String.valueOf(sp.getSoLuong()));
                    lblChiTietSoLuongDaBan.setText(String.valueOf(tinhSoLuongDaBan(sp.getMaSP())));
                    lblChiTietChip.setText(sp.getChip());
                    lblChiTietSoCamera.setText(String.valueOf(sp.getSoCamera()));
                    lblChiTietDungLuongPin.setText(String.valueOf(sp.getDungLuongPin()));
                    lblChiTietKichThuocManHinh.setText(String.valueOf(sp.getKichThuocManHinh()));
                    lblChiTietHinhMinhHoa.setText(sp.getHinhMinhHoa() != null ? sp.getHinhMinhHoa() : "");
                    if (sp.getHinhMinhHoa() != null && !sp.getHinhMinhHoa().isEmpty()) {
                        try {
                            ImageIcon icon = new ImageIcon(sp.getHinhMinhHoa());
                            Image scaledImage = icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                            lblChiTietHinhMinhHoa.setIcon(new ImageIcon(scaledImage));
                            lblChiTietHinhMinhHoa.setText("");
                        } catch (Exception ex) {
                            lblChiTietHinhMinhHoa.setIcon(null);
                            lblChiTietHinhMinhHoa.setText("Lỗi tải hình");
                        }
                    } else {
                        lblChiTietHinhMinhHoa.setIcon(null);
                        lblChiTietHinhMinhHoa.setText("");
                    }
                } else {
                    clearDetailPanel();
                    formPanel.setVisible(false);
                    clearForm();
                    isEditing = false;
                }
            }
        });

        refreshTable();
    }

    private void chonAnh() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image files", "jpg", "png", "jpeg"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtHinhMinhHoa.setText(selectedFile.getAbsolutePath());
        }
    }

    private void themSanPham() {
        try {
            String maSP = txtMaSP.getText();
            String ten = txtTen.getText();
            String hang = txtHang.getText();
            double gia = Double.parseDouble(txtGia.getText());
            int soLuong = Integer.parseInt(txtSoLuong.getText());
            String chip = txtChip.getText();
            int soCamera = Integer.parseInt(txtSoCamera.getText());
            int dungLuongPin = Integer.parseInt(txtDungLuongPin.getText());
            double kichThuocManHinh = Double.parseDouble(txtKichThuocManHinh.getText());
            String hinhMinhHoa = txtHinhMinhHoa.getText();

            if (maSP.isEmpty() || ten.isEmpty() || hang.isEmpty() || chip.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng điền đầy đủ thông tin bắt buộc!");
            }

            if (dsSanPham.stream().anyMatch(sp -> sp.getMaSP().equals(maSP))) {
                throw new IllegalArgumentException("Mã sản phẩm đã tồn tại!");
            }

            SanPham sp = new SanPham(maSP, ten, hang, gia, soLuong, chip, soCamera, dungLuongPin, kichThuocManHinh);
            sp.setHinhMinhHoa(hinhMinhHoa);
            dsSanPham.add(sp);
            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            refreshTable();
            formPanel.setVisible(false);
            clearForm();
            clearDetailPanel();
            JOptionPane.showMessageDialog(this, "Thêm sản phẩm thành công!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá, số lượng, số camera, dung lượng pin và kích thước màn hình phải là số!");
        } catch (IllegalArgumentException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void chuanBiSuaSanPham() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để sửa!");
            return;
        }

        SanPham sp = dsSanPham.get(row);
        txtMaSP.setText(sp.getMaSP());
        txtTen.setText(sp.getTen());
        txtHang.setText(sp.getHang());
        txtGia.setText(String.valueOf(sp.getGia()));
        txtSoLuong.setText(String.valueOf(sp.getSoLuong()));
        txtChip.setText(sp.getChip());
        txtSoCamera.setText(String.valueOf(sp.getSoCamera()));
        txtDungLuongPin.setText(String.valueOf(sp.getDungLuongPin()));
        txtKichThuocManHinh.setText(String.valueOf(sp.getKichThuocManHinh()));
        txtHinhMinhHoa.setText(sp.getHinhMinhHoa() != null ? sp.getHinhMinhHoa() : "");
        formPanel.setVisible(true);
        isEditing = true;
    }

    private void suaSanPham() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để sửa!");
            return;
        }

        try {
            String maSP = txtMaSP.getText();
            String ten = txtTen.getText();
            String hang = txtHang.getText();
            double gia = Double.parseDouble(txtGia.getText());
            int soLuong = Integer.parseInt(txtSoLuong.getText());
            String chip = txtChip.getText();
            int soCamera = Integer.parseInt(txtSoCamera.getText());
            int dungLuongPin = Integer.parseInt(txtDungLuongPin.getText());
            double kichThuocManHinh = Double.parseDouble(txtKichThuocManHinh.getText());
            String hinhMinhHoa = txtHinhMinhHoa.getText();

            if (maSP.isEmpty() || ten.isEmpty() || hang.isEmpty() || chip.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng điền đầy đủ thông tin bắt buộc!");
            }

            if (dsSanPham.stream().anyMatch(sp -> sp.getMaSP().equals(maSP) && !sp.getMaSP().equals(dsSanPham.get(row).getMaSP()))) {
                throw new IllegalArgumentException("Mã sản phẩm đã tồn tại!");
            }

            SanPham sp = dsSanPham.get(row);
            sp.setMaSP(maSP);
            sp.setTen(ten);
            sp.setHang(hang);
            sp.setGia(gia);
            sp.setSoLuong(soLuong);
            sp.setChip(chip);
            sp.setSoCamera(soCamera);
            sp.setDungLuongPin(dungLuongPin);
            sp.setKichThuocManHinh(kichThuocManHinh);
            sp.setHinhMinhHoa(hinhMinhHoa);

            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            refreshTable();
            formPanel.setVisible(false);
            clearForm();
            clearDetailPanel();
            isEditing = false;
            JOptionPane.showMessageDialog(this, "Sửa sản phẩm thành công!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá, số lượng, số camera, dung lượng pin và kích thước màn hình phải là số!");
        } catch (IllegalArgumentException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void xoaSanPham() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để xóa!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa sản phẩm này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                dsSanPham.remove(row);
                dataManager.saveToFile(dsSanPham, "sanpham.dat");
                refreshTable();
                clearDetailPanel();
                formPanel.setVisible(false);
                clearForm();
                JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi lưu file: " + e.getMessage());
            }
        }
    }

    private int tinhSoLuongDaBan(String maSP) {
        try {
            List<HoaDon> dsHoaDon = hoaDonDataManager.loadFromFile("hoadon.dat");
            return dsHoaDon.stream()
                    .filter(hd -> hd.getTenSP().equals(maSP))
                    .mapToInt(HoaDon::getSoLuong)
                    .sum();
        } catch (IOException | ClassNotFoundException e) {
            return 0;
        }
    }

    private void refreshTable() {
        String[] columns = {"Mã SP", "Tên", "Hãng", "Giá", "Số lượng", "Đã bán"};
        Object[][] data = new Object[dsSanPham.size()][6];
        for (int i = 0; i < dsSanPham.size(); i++) {
            SanPham sp = dsSanPham.get(i);
            int soLuongDaBan = tinhSoLuongDaBan(sp.getMaSP());
            data[i] = new Object[]{sp.getMaSP(), sp.getTen(), sp.getHang(), formatPrice(sp.getGia()), sp.getSoLuong(), soLuongDaBan};
        }
        table.setModel(new javax.swing.table.DefaultTableModel(data, columns));
        table.revalidate();
        table.repaint();
    }

    private void clearForm() {
        txtMaSP.setText("");
        txtTen.setText("");
        txtHang.setText("");
        txtGia.setText("");
        txtSoLuong.setText("");
        txtChip.setText("");
        txtSoCamera.setText("");
        txtDungLuongPin.setText("");
        txtKichThuocManHinh.setText("");
        txtHinhMinhHoa.setText("");
    }

    private void clearDetailPanel() {
        lblChiTietMaSP.setText("");
        lblChiTietTen.setText("");
        lblChiTietHang.setText("");
        lblChiTietGia.setText("");
        lblChiTietSoLuong.setText("");
        lblChiTietSoLuongDaBan.setText("");
        lblChiTietChip.setText("");
        lblChiTietSoCamera.setText("");
        lblChiTietDungLuongPin.setText("");
        lblChiTietKichThuocManHinh.setText("");
        lblChiTietHinhMinhHoa.setText("");
        lblChiTietHinhMinhHoa.setIcon(null);
    }
}