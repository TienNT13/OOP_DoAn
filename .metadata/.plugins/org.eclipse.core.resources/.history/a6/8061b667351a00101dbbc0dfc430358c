package do_an_1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class PanelSanPham extends JPanel {
    private List<SanPham> dsSanPham;
    private JTable table;
    private JTextField txtMaSP, txtTen, txtHang, txtGia, txtSoLuong, txtChip, txtSoCamera, txtDungLuongPin, txtKichThuocManHinh;
    private JLabel lblChiTietMaSP, lblChiTietTen, lblChiTietHang, lblChiTietGia, lblChiTietSoLuong, lblChiTietChip, lblChiTietSoCamera, lblChiTietDungLuongPin, lblChiTietKichThuocManHinh;
    private JPanel formPanel;
    private DataManager<SanPham> dataManager;

    private String formatPrice(double price) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(price) + " VND";
    }

    public PanelSanPham() {
    	
    	setBackground(Color.decode("#F8EAD9")); // Set background color
        setLayout(new BorderLayout());
        JLabel label = new JLabel("Quản lý sản phẩm (Placeholder)", SwingConstants.CENTER);
        add(label, BorderLayout.CENTER);
        
        dataManager = new FileDataManager<>();
        dsSanPham = new ArrayList<>();
        try {
            dsSanPham = dataManager.loadFromFile("sanpham.dat");
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file sản phẩm: " + e.getMessage());
        }

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Nút "Thêm sản phẩm"
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton btnShowForm = new JButton("Thêm sản phẩm");
        btnShowForm.addActionListener(e -> {
            formPanel.setVisible(true); // Hiện form khi nhấn nút
            clearForm(); // Xóa dữ liệu trong form
        });
        buttonPanel.add(btnShowForm);
        add(buttonPanel, BorderLayout.NORTH);

        // Bảng hiển thị sản phẩm
        String[] columns = {"Mã SP", "Tên", "Hãng", "Giá", "Số lượng"};
        Object[][] data = new Object[dsSanPham.size()][5];
        for (int i = 0; i < dsSanPham.size(); i++) {
            SanPham sp = dsSanPham.get(i);
            data[i] = new Object[]{sp.getMaSP(), sp.getTen(), sp.getHang(), formatPrice(sp.getGia()), sp.getSoLuong()};
        }
        table = new JTable(data, columns);
        table.setFillsViewportHeight(true); // Đảm bảo bảng chiếm toàn bộ không gian
        JScrollPane tableScrollPane = new JScrollPane(table);
        add(tableScrollPane, BorderLayout.CENTER);

        // Form nhập liệu (hiển thị khi nhấn "Thêm sản phẩm")
        formPanel = new JPanel(new GridLayout(10, 2, 5, 5));
        formPanel.add(new JLabel("Mã SP:"));
        txtMaSP = new JTextField();
        formPanel.add(txtMaSP);
        formPanel.add(new JLabel("Tên:"));
        txtTen = new JTextField();
        formPanel.add(txtTen);
        formPanel.add(new JLabel("Hãng:"));
        txtHang = new JTextField();
        formPanel.add(txtHang);
        formPanel.add(new JLabel("Giá:"));
        txtGia = new JTextField();
        formPanel.add(txtGia);
        formPanel.add(new JLabel("Số lượng:"));
        txtSoLuong = new JTextField();
        formPanel.add(txtSoLuong);
        formPanel.add(new JLabel("Chip:"));
        txtChip = new JTextField();
        formPanel.add(txtChip);
        formPanel.add(new JLabel("Số camera:"));
        txtSoCamera = new JTextField();
        formPanel.add(txtSoCamera);
        formPanel.add(new JLabel("Dung lượng pin (mAh):"));
        txtDungLuongPin = new JTextField();
        formPanel.add(txtDungLuongPin);
        formPanel.add(new JLabel("Kích thước màn hình (inch):"));
        txtKichThuocManHinh = new JTextField();
        formPanel.add(txtKichThuocManHinh);

        JButton btnThem = new JButton("Thêm");
        btnThem.addActionListener(e -> themSanPham());
        formPanel.add(btnThem);

        JButton btnHuy = new JButton("Hủy");
        btnHuy.addActionListener(e -> {
            formPanel.setVisible(false);
            clearForm();
            clearDetailPanel();
        });
        formPanel.add(btnHuy);

        add(formPanel, BorderLayout.WEST);
        formPanel.setVisible(false); // Ẩn form ban đầu

        // Panel hiển thị chi tiết sản phẩm (phía dưới)
        JPanel detailPanel = new JPanel(new GridLayout(9, 2, 5, 5));
        detailPanel.setBorder(BorderFactory.createTitledBorder("Chi tiết sản phẩm"));
        
        detailPanel.add(new JLabel("Mã SP:"));
        lblChiTietMaSP = new JLabel("");
        detailPanel.add(lblChiTietMaSP);

        detailPanel.add(new JLabel("Tên:"));
        lblChiTietTen = new JLabel("");
        detailPanel.add(lblChiTietTen);

        detailPanel.add(new JLabel("Hãng:"));
        lblChiTietHang = new JLabel("");
        detailPanel.add(lblChiTietHang);

        detailPanel.add(new JLabel("Giá:"));
        lblChiTietGia = new JLabel("");
        detailPanel.add(lblChiTietGia);

        detailPanel.add(new JLabel("Số lượng:"));
        lblChiTietSoLuong = new JLabel("");
        detailPanel.add(lblChiTietSoLuong);

        detailPanel.add(new JLabel("Chip:"));
        lblChiTietChip = new JLabel("");
        detailPanel.add(lblChiTietChip);

        detailPanel.add(new JLabel("Số camera:"));
        lblChiTietSoCamera = new JLabel("");
        detailPanel.add(lblChiTietSoCamera);

        detailPanel.add(new JLabel("Dung lượng pin (mAh):"));
        lblChiTietDungLuongPin = new JLabel("");
        detailPanel.add(lblChiTietDungLuongPin);

        detailPanel.add(new JLabel("Kích thước màn hình (inch):"));
        lblChiTietKichThuocManHinh = new JLabel("");
        detailPanel.add(lblChiTietKichThuocManHinh);

        add(detailPanel, BorderLayout.SOUTH);

        // Sự kiện chọn hàng trong bảng
        table.getSelectionModel().addListSelectionListener(e -> {
            int row = table.getSelectedRow();
            if (row != -1) {
                SanPham sp = dsSanPham.get(row);
                lblChiTietMaSP.setText(sp.getMaSP());
                lblChiTietTen.setText(sp.getTen());
                lblChiTietHang.setText(sp.getHang());
                lblChiTietGia.setText(formatPrice(sp.getGia()));
                lblChiTietSoLuong.setText(String.valueOf(sp.getSoLuong()));
                lblChiTietChip.setText(sp.getChip());
                lblChiTietSoCamera.setText(String.valueOf(sp.getSoCamera()));
                lblChiTietDungLuongPin.setText(String.valueOf(sp.getDungLuongPin()));
                lblChiTietKichThuocManHinh.setText(String.valueOf(sp.getKichThuocManHinh()));
            } else {
                clearDetailPanel();
            }
        });

        // Sự kiện nhấp chuột vào bảng để phát hiện nhấp vào vùng trống
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = table.rowAtPoint(e.getPoint());
                if (row == -1) { // Nhấp vào vùng trống
                    clearDetailPanel(); // Xóa thông tin chi tiết
                    formPanel.setVisible(false); // Ẩn form nhập liệu
                    clearForm(); // Xóa dữ liệu trong form
                }
            }
        });

        // Cập nhật lại bảng để đảm bảo hiển thị
        refreshTable();
    }

    private void themSanPham() {
        try {
            String maSP = txtMaSP.getText();
            String ten = txtTen.getText();
            String hang = txtHang.getText();
            double gia = Double.parseDouble(txtGia.getText());
            int soLuong = Integer.parseInt(txtSoLuong.getText());
            String chip = txtChip.getText();
            int soCamera = Integer.parseInt(txtSoCamera.getText());
            int dungLuongPin = Integer.parseInt(txtDungLuongPin.getText());
            double kichThuocManHinh = Double.parseDouble(txtKichThuocManHinh.getText());

            if (maSP.isEmpty() || ten.isEmpty() || hang.isEmpty() || chip.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng điền đầy đủ thông tin!");
            }

            // Kiểm tra mã sản phẩm đã tồn tại chưa
            if (dsSanPham.stream().anyMatch(sp -> sp.getMaSP().equals(maSP))) {
                throw new IllegalArgumentException("Mã sản phẩm đã tồn tại!");
            }

            SanPham sp = new SanPham(maSP, ten, hang, gia, soLuong, chip, soCamera, dungLuongPin, kichThuocManHinh);
            dsSanPham.add(sp);
            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            refreshTable();
            formPanel.setVisible(false); // Ẩn form sau khi thêm
            clearForm(); // Xóa dữ liệu trong form
            clearDetailPanel(); // Xóa thông tin chi tiết
            JOptionPane.showMessageDialog(this, "Thêm sản phẩm thành công!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá, số lượng, số camera, dung lượng pin và kích thước màn hình phải là số!");
        } catch (IllegalArgumentException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void suaSanPham() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để sửa!");
            return;
        }

        try {
            String maSP = txtMaSP.getText();
            String ten = txtTen.getText();
            String hang = txtHang.getText();
            double gia = Double.parseDouble(txtGia.getText());
            int soLuong = Integer.parseInt(txtSoLuong.getText());

            // Kiểm tra mã sản phẩm đã tồn tại chưa (trừ sản phẩm đang sửa)
            if (dsSanPham.stream().anyMatch(sp -> sp.getMaSP().equals(maSP) && !sp.getMaSP().equals(dsSanPham.get(row).getMaSP()))) {
                throw new IllegalArgumentException("Mã sản phẩm đã tồn tại!");
            }

            SanPham sp = dsSanPham.get(row);
            sp.setMaSP(maSP);
            sp.setTen(ten);
            sp.setHang(hang);
            sp.setGia(gia);
            sp.setSoLuong(soLuong);
            // Giữ nguyên các trường chi tiết (Chip, Số camera, v.v.) vì không sửa chúng

            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            refreshTable();
            formPanel.setVisible(false); // Ẩn form sau khi sửa
            clearForm(); // Xóa dữ liệu trong form
            clearDetailPanel(); // Xóa thông tin chi tiết
            JOptionPane.showMessageDialog(this, "Sửa sản phẩm thành công!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá và số lượng phải là số!");
        } catch (IllegalArgumentException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void refreshTable() {
        String[] columns = {"Mã SP", "Tên", "Hãng", "Giá", "Số lượng"};
        Object[][] data = new Object[dsSanPham.size()][5];
        for (int i = 0; i < dsSanPham.size(); i++) {
            SanPham sp = dsSanPham.get(i);
            data[i] = new Object[]{sp.getMaSP(), sp.getTen(), sp.getHang(), formatPrice(sp.getGia()), sp.getSoLuong()};
        }
        table.setModel(new javax.swing.table.DefaultTableModel(data, columns));
        table.revalidate();
        table.repaint();
    }

    private void clearForm() {
        txtMaSP.setText("");
        txtTen.setText("");
        txtHang.setText("");
        txtGia.setText("");
        txtSoLuong.setText("");
        txtChip.setText("");
        txtSoCamera.setText("");
        txtDungLuongPin.setText("");
        txtKichThuocManHinh.setText("");
    }

    private void clearDetailPanel() {
        lblChiTietMaSP.setText("");
        lblChiTietTen.setText("");
        lblChiTietHang.setText("");
        lblChiTietGia.setText("");
        lblChiTietSoLuong.setText("");
        lblChiTietChip.setText("");
        lblChiTietSoCamera.setText("");
        lblChiTietDungLuongPin.setText("");
        lblChiTietKichThuocManHinh.setText("");
    }
}