package do_an_1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class PanelSanPham extends JPanel {
    private List<SanPham> dsSanPham; // Danh sách sản phẩm
    private List<SanPham> filteredSanPham; // Danh sách sản phẩm sau khi lọc
    private JTextField txtMaSP, txtTen, txtGia, txtSoLuong, txtChip, txtCamera, txtPin, txtManHinh;
    private JComboBox<String> cbHang;
    private JPanel productPanel; // Panel hiển thị lưới sản phẩm
    private JLabel lblHinh; // Label hiển thị hình minh họa
    private String selectedImagePath; // Đường dẫn hình minh họa được chọn
    private DataManager<SanPham> dataManager;

    // Định dạng giá tiền
    private String formatPrice(double price) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(price) + " VND";
    }

    public PanelSanPham() {
        // Khởi tạo danh sách và đối tượng quản lý dữ liệu
        dsSanPham = new ArrayList<>();
        filteredSanPham = new ArrayList<>();
        dataManager = new FileDataManager<>();
        try {
            dsSanPham = dataManager.loadFromFile("sanpham.dat");
            filteredSanPham = new ArrayList<>(dsSanPham);
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file sản phẩm: " + e.getMessage());
        }

        // Cấu hình giao diện
        setLayout(new BorderLayout());
        setBackground(Color.decode("#F8EAD9")); // Màu nền panel
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Form nhập liệu sản phẩm
        JPanel inputPanel = new JPanel(new GridLayout(10, 2, 5, 5));
        inputPanel.setBackground(Color.decode("#F8EAD9"));
        inputPanel.add(new JLabel("Mã SP:"));
        txtMaSP = new JTextField();
        inputPanel.add(txtMaSP);
        inputPanel.add(new JLabel("Tên SP:"));
        txtTen = new JTextField();
        inputPanel.add(txtTen);
        inputPanel.add(new JLabel("Hãng:"));
        cbHang = new JComboBox<>(new String[]{"Tất cả", "Apple", "Samsung", "Xiaomi", "Oppo", "Vivo"});
        inputPanel.add(cbHang);
        inputPanel.add(new JLabel("Giá:"));
        txtGia = new JTextField();
        inputPanel.add(txtGia);
        inputPanel.add(new JLabel("Số lượng:"));
        txtSoLuong = new JTextField();
        inputPanel.add(txtSoLuong);
        inputPanel.add(new JLabel("Chip:"));
        txtChip = new JTextField();
        inputPanel.add(txtChip);
        inputPanel.add(new JLabel("Số camera:"));
        txtCamera = new JTextField();
        inputPanel.add(txtCamera);
        inputPanel.add(new JLabel("Pin (mAh):"));
        txtPin = new JTextField();
        inputPanel.add(txtPin);
        inputPanel.add(new JLabel("Màn hình (inch):"));
        txtManHinh = new JTextField();
        inputPanel.add(txtManHinh);
        inputPanel.add(new JLabel("Hình minh họa:"));
        lblHinh = new JLabel("Chưa chọn hình");
        inputPanel.add(lblHinh);

        // Nút chọn hình
        JButton btnChonHinh = new JButton("Chọn hình");
        btnChonHinh.addActionListener(e -> chonHinh()); // Chọn hình minh họa
        inputPanel.add(btnChonHinh);

        // Các nút chức năng
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.setBackground(Color.decode("#F8EAD9"));
        JButton btnThem = new JButton("Thêm");
        btnThem.addActionListener(e -> themSanPham()); // Thêm sản phẩm mới
        JButton btnSua = new JButton("Sửa");
        btnSua.addActionListener(e -> suaSanPham()); // Sửa sản phẩm được chọn
        JButton btnXoa = new JButton("Xóa");
        btnXoa.addActionListener(e -> xoaSanPham()); // Xóa sản phẩm được chọn
        buttonPanel.add(btnThem);
        buttonPanel.add(btnSua);
        buttonPanel.add(btnXoa);

        // Panel hiển thị lưới sản phẩm
        productPanel = new JPanel(new GridLayout(0, 5, 15, 15));
        JPanel productScrollPanel = new JPanel(new BorderLayout());
        productScrollPanel.add(new JScrollPane(productPanel), BorderLayout.CENTER);
        refreshProductGrid(); // Cập nhật lưới sản phẩm

        // Bộ lọc hãng
        cbHang.addActionListener(e -> locTheoHang()); // Lọc sản phẩm theo hãng

        // Thêm các thành phần vào panel
        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(inputPanel, BorderLayout.NORTH);
        topPanel.add(buttonPanel, BorderLayout.SOUTH);
        add(topPanel, BorderLayout.NORTH);
        add(productScrollPanel, BorderLayout.CENTER);
    }

    private void themSanPham() {
        try {
            // Lấy thông tin từ trường nhập liệu
            String maSP = txtMaSP.getText().trim();
            String ten = txtTen.getText().trim();
            String hang = (String) cbHang.getSelectedItem();
            double gia = Double.parseDouble(txtGia.getText().trim());
            int soLuong = Integer.parseInt(txtSoLuong.getText().trim());
            String chip = txtChip.getText().trim();
            int soCamera = Integer.parseInt(txtCamera.getText().trim());
            int dungLuongPin = Integer.parseInt(txtPin.getText().trim());
            double kichThuocManHinh = Double.parseDouble(txtManHinh.getText().trim());

            // Kiểm tra dữ liệu hợp lệ
            if (maSP.isEmpty() || ten.isEmpty() || hang.equals("Tất cả") || chip.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng điền đầy đủ thông tin!");
            }
            if (gia <= 0 || soLuong < 0 || soCamera < 0 || dungLuongPin <= 0 || kichThuocManHinh <= 0) {
                throw new IllegalArgumentException("Giá, số lượng, camera, pin, màn hình phải lớn hơn 0!");
            }
            if (dsSanPham.stream().anyMatch(sp -> sp.getMaSP().equals(maSP))) {
                throw new IllegalArgumentException("Mã sản phẩm đã tồn tại!");
            }

            // Thêm sản phẩm mới
            SanPham sp = new SanPham(maSP, ten, hang, gia, soLuong, chip, soCamera, dungLuongPin, kichThuocManHinh);
            sp.setHinhMinhHoa(selectedImagePath);
            dsSanPham.add(sp);
            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            locTheoHang();
            clearForm(); // Xóa form nhập liệu
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá, số lượng, camera, pin, màn hình phải là số!");
        } catch (IllegalArgumentException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void suaSanPham() {
        // Sửa sản phẩm được chọn
        try {
            String maSP = txtMaSP.getText().trim();
            String ten = txtTen.getText().trim();
            String hang = (String) cbHang.getSelectedItem();
            double gia = Double.parseDouble(txtGia.getText().trim());
            int soLuong = Integer.parseInt(txtSoLuong.getText().trim());
            String chip = txtChip.getText().trim();
            int soCamera = Integer.parseInt(txtCamera.getText().trim());
            int dungLuongPin = Integer.parseInt(txtPin.getText().trim());
            double kichThuocManHinh = Double.parseDouble(txtManHinh.getText().trim());

            // Kiểm tra dữ liệu hợp lệ
            if (maSP.isEmpty() || ten.isEmpty() || hang.equals("Tất cả") || chip.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng điền đầy đủ thông tin!");
            }
            if (gia <= 0 || soLuong < 0 || soCamera < 0 || dungLuongPin <= 0 || kichThuocManHinh <= 0) {
                throw new IllegalArgumentException("Giá, số lượng, camera, pin, màn hình phải lớn hơn 0!");
            }
            SanPham existing = dsSanPham.stream()
                    .filter(sp -> sp.getMaSP().equals(maSP))
                    .findFirst()
                    .orElse(null);
            if (existing == null) {
                throw new IllegalArgumentException("Mã sản phẩm không tồn tại!");
            }

            // Cập nhật thông tin sản phẩm
            dsSanPham.remove(existing);
            SanPham sp = new SanPham(maSP, ten, hang, gia, soLuong, chip, soCamera, dungLuongPin, kichThuocManHinh);
            sp.setHinhMinhHoa(selectedImagePath);
            dsSanPham.add(sp);
            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            locTheoHang();
            clearForm();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá, số lượng, camera, pin, màn hình phải là số!");
        } catch (IllegalArgumentException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void xoaSanPham() {
        // Xóa sản phẩm được chọn
        try {
            String maSP = txtMaSP.getText().trim();
            if (maSP.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng nhập mã sản phẩm để xóa!");
            }
            SanPham sp = dsSanPham.stream()
                    .filter(p -> p.getMaSP().equals(maSP))
                    .findFirst()
                    .orElse(null);
            if (sp == null) {
                throw new IllegalArgumentException("Mã sản phẩm không tồn tại!");
            }

            // Xóa sản phẩm
            dsSanPham.remove(sp);
            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            locTheoHang();
            clearForm();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lưu file: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void chonHinh() {
        // Mở dialog chọn file hình ảnh
        JFileChooser fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            selectedImagePath = file.getAbsolutePath();
            lblHinh.setText(file.getName());
        }
    }

    private void locTheoHang() {
        // Lọc sản phẩm theo hãng
        String selectedHang = (String) cbHang.getSelectedItem();
        if (selectedHang.equals("Tất cả")) {
            filteredSanPham = new ArrayList<>(dsSanPham);
        } else {
            filteredSanPham = dsSanPham.stream()
                    .filter(sp -> sp.getHang().equals(selectedHang))
                    .collect(Collectors.toList());
        }
        refreshProductGrid(); // Cập nhật lưới sản phẩm
    }

    private void refreshProductGrid() {
        productPanel.removeAll(); // Xóa tất cả nội dung hiện tại của panel
        // Tính số hàng cần hiển thị (tối thiểu 1 hàng)
        int soHang = Math.max(1, (int) Math.ceil(filteredSanPham.size() / 5.0));
        int panelWidth = 150 * 5 + 15 * 4; // Chiều rộng panel: 5 cột, mỗi cột 150px + khoảng cách
        int panelHeight = soHang * (200 + 15); // Chiều cao panel: mỗi hàng 200px + khoảng cách
        productPanel.setPreferredSize(new Dimension(panelWidth, panelHeight));

        // Duyệt qua danh sách sản phẩm để hiển thị
        for (SanPham sp : filteredSanPham) {
            // Tạo panel cho từng sản phẩm
            JPanel itemPanel = new JPanel(new BorderLayout(5, 5));
            itemPanel.setBackground(Color.WHITE);
            itemPanel.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createMatteBorder(0, 0, 2, 2, Color.decode("#D3A875")), // Viền màu cam
                BorderFactory.createEmptyBorder(5, 5, 5, 5)
            ));

            // Hiển thị hình minh họa
            JLabel lblHinh = new JLabel();
            if (sp.getHinhMinhHoa() != null && !sp.getHinhMinhHoa().isEmpty()) {
                try {
                    ImageIcon icon = new ImageIcon(sp.getHinhMinhHoa());
                    // Thu nhỏ hình ảnh để vừa khung
                    Image scaledImage = icon.getImage().getScaledInstance(120, 120, Image.SCALE_SMOOTH);
                    lblHinh.setIcon(new ImageIcon(scaledImage));
                } catch (Exception e) {
                    lblHinh.setText("Không có ảnh"); // Hiển thị thông báo nếu lỗi tải ảnh
                }
            } else {
                lblHinh.setText("Không có ảnh");
            }
            itemPanel.add(lblHinh, BorderLayout.NORTH);

            // Hiển thị tên và giá sản phẩm
            JPanel infoPanel = new JPanel();
            infoPanel.setBackground(Color.WHITE);
            infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));
            JLabel lblTen = new JLabel(sp.getTen());
            lblTen.setAlignmentX(Component.CENTER_ALIGNMENT);
            lblTen.setFont(new Font("Arial", Font.BOLD, 12));
            infoPanel.add(lblTen);
            JLabel lblGia = new JLabel(formatPrice(sp.getGia()));
            lblGia.setAlignmentX(Component.CENTER_ALIGNMENT);
            lblGia.setFont(new Font("Arial", Font.BOLD, 12));
            infoPanel.add(lblGia);
            itemPanel.add(infoPanel, BorderLayout.CENTER);

            // Thêm sự kiện nhấp chuột để hiển thị chi tiết sản phẩm
            itemPanel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    hienThiChiTietSanPham(dsSanPham.indexOf(sp)); // Hiển thị dialog chi tiết
                }
            });

            productPanel.add(itemPanel); // Thêm panel sản phẩm vào lưới
        }
        productPanel.revalidate(); // Cập nhật bố cục
        productPanel.repaint(); // Vẽ lại giao diện
    }

    private void hienThiChiTietSanPham(int index) {
        // Hiển thị dialog chi tiết sản phẩm
        SanPham sp = dsSanPham.get(index);
        txtMaSP.setText(sp.getMaSP());
        txtTen.setText(sp.getTen());
        cbHang.setSelectedItem(sp.getHang());
        txtGia.setText(String.valueOf(sp.getGia()));
        txtSoLuong.setText(String.valueOf(sp.getSoLuong()));
        txtChip.setText(sp.getChip());
        txtCamera.setText(String.valueOf(sp.getSoCamera()));
        txtPin.setText(String.valueOf(sp.getDungLuongPin()));
        txtManHinh.setText(String.valueOf(sp.getKichThuocManHinh()));
        selectedImagePath = sp.getHinhMinhHoa();
        lblHinh.setText(selectedImagePath != null && !selectedImagePath.isEmpty() ? new File(selectedImagePath).getName() : "Chưa chọn hình");
    }

    private void clearForm() {
        // Xóa form nhập liệu
        txtMaSP.setText("");
        txtTen.setText("");
        cbHang.setSelectedIndex(0);
        txtGia.setText("");
        txtSoLuong.setText("");
        txtChip.setText("");
        txtCamera.setText("");
        txtPin.setText("");
        txtManHinh.setText("");
        selectedImagePath = "";
        lblHinh.setText("Chưa chọn hình");
    }
}