package do_an_1;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class PanelSanPham extends JPanel {
    private List<SanPham> dsSanPham;
    private JTable table;
    private JTextField txtSearch;
    private DataManager<SanPham> spDataManager;

    public PanelSanPham() {
        spDataManager = new FileDataManager<>();
        dsSanPham = new ArrayList<>();

        try {
            dsSanPham = spDataManager.loadFromFile("sanpham.dat");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file sản phẩm: " + e.getMessage());
        }

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Tạo bảng để hiển thị danh sách sản phẩm
        String[] columns = {"Mã SP", "Tên sản phẩm", "Hãng", "Giá", "Số lượng", "Chip", "Số camera", "Pin (mAh)", "Màn hình (inch)", "Hình minh họa"};
        Object[][] data = getProductData();
        table = new JTable(new DefaultTableModel(data, columns));
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);

        // Tạo form tìm kiếm
        JPanel searchPanel = new JPanel(new FlowLayout());
        searchPanel.add(new JLabel("Tìm kiếm:"));
        txtSearch = new JTextField(20);
        searchPanel.add(txtSearch);
        JButton btnSearch = new JButton("Tìm");
        btnSearch.addActionListener(this::searchProduct);
        searchPanel.add(btnSearch);
        add(searchPanel, BorderLayout.NORTH);

        // Tạo các nút chức năng Thêm, Sửa, Xóa
        JPanel buttonPanel = new JPanel();
        JButton btnAdd = new JButton("Thêm sản phẩm");
        JButton btnEdit = new JButton("Sửa sản phẩm");
        JButton btnDelete = new JButton("Xóa sản phẩm");

        btnAdd.addActionListener(this::addProduct);
        btnEdit.addActionListener(this::editProduct);
        btnDelete.addActionListener(this::deleteProduct);

        buttonPanel.add(btnAdd);
        buttonPanel.add(btnEdit);
        buttonPanel.add(btnDelete);
        add(buttonPanel, BorderLayout.SOUTH);

        // MouseListener để hiển thị thông tin chi tiết sản phẩm khi nhấn vào dòng sản phẩm trong bảng
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = table.getSelectedRow();
                if (row != -1) {
                    SanPham selectedProduct = dsSanPham.get(row);
                    showProductDetails(selectedProduct);
                }
            }
        });
    }

    private Object[][] getProductData() {
        Object[][] data = new Object[dsSanPham.size()][10];  // Cập nhật thêm cột hình minh họa
        for (int i = 0; i < dsSanPham.size(); i++) {
            SanPham sp = dsSanPham.get(i);
            data[i][0] = sp.getMaSP();
            data[i][1] = sp.getTen();
            data[i][2] = sp.getHang();
            data[i][3] = formatPrice(sp.getGia());
            data[i][4] = sp.getSoLuong();
            data[i][5] = sp.getChip();
            data[i][6] = sp.getSoCamera();
            data[i][7] = sp.getDungLuongPin();
            data[i][8] = sp.getKichThuocManHinh();
            data[i][9] = sp.getHinhMinhHoa();
        }
        return data;
    }

    private void searchProduct(ActionEvent e) {
        String keyword = txtSearch.getText().toLowerCase();
        List<SanPham> filteredList = new ArrayList<>();
        for (SanPham sp : dsSanPham) {
            if (sp.getMaSP().toLowerCase().contains(keyword) || sp.getTen().toLowerCase().contains(keyword)) {
                filteredList.add(sp);
            }
        }
        dsSanPham = filteredList;
        updateProductTable();
    }

    private void updateProductTable() {
        String[] columns = {"Mã SP", "Tên sản phẩm", "Hãng", "Giá", "Số lượng", "Chip", "Số camera", "Pin (mAh)", "Màn hình (inch)", "Hình minh họa"};
        Object[][] data = getProductData();
        table.setModel(new DefaultTableModel(data, columns));
    }

    private String formatPrice(double price) {
        return String.format("%,.0f VND", price);
    }

    private void addProduct(ActionEvent e) {
        // Tạo cửa sổ thêm sản phẩm
        JDialog addProductDialog = new JDialog();
        addProductDialog.setTitle("Thêm sản phẩm");
        addProductDialog.setSize(800, 500);
        addProductDialog.setLocationRelativeTo(this);

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        // Tạo bảng nhập liệu sản phẩm
        String[] columns = {"Mã SP", "Tên sản phẩm", "Hãng", "Giá", "Số lượng", "Chip", "Số camera", "Pin (mAh)", "Màn hình (inch)", "Hình minh họa"};
        DefaultTableModel model = new DefaultTableModel(columns, 1);
        JTable inputTable = new JTable(model);
        inputTable.setRowHeight(30);
        JScrollPane scrollPane = new JScrollPane(inputTable);
        panel.add(scrollPane, BorderLayout.CENTER);

        // Nút chọn hình ảnh minh họa
        JButton btnSelectImage = new JButton("Chọn ảnh");
        btnSelectImage.addActionListener(e1 -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Chọn ảnh minh họa");
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif"));
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                inputTable.setValueAt(selectedFile.getAbsolutePath(), 0, 9); // Cập nhật cột "Hình minh họa"
            }
        });
        panel.add(btnSelectImage, BorderLayout.SOUTH);

        // Nút thêm sản phẩm
        JButton btnAdd = new JButton("Thêm sản phẩm");
        btnAdd.addActionListener(e1 -> {
            String maSP = (String) inputTable.getValueAt(0, 0);
            String ten = (String) inputTable.getValueAt(0, 1);
            String hang = (String) inputTable.getValueAt(0, 2);
            double gia = Double.parseDouble((String) inputTable.getValueAt(0, 3));
            int soLuong = Integer.parseInt((String) inputTable.getValueAt(0, 4));
            String chip = (String) inputTable.getValueAt(0, 5);
            int soCamera = Integer.parseInt((String) inputTable.getValueAt(0, 6));
            int dungLuongPin = Integer.parseInt((String) inputTable.getValueAt(0, 7));
            double kichThuocManHinh = Double.parseDouble((String) inputTable.getValueAt(0, 8));
            String hinhMinhHoa = (String) inputTable.getValueAt(0, 9);

            SanPham newProduct = new SanPham(maSP, ten, hang, gia, soLuong, chip, soCamera, dungLuongPin, kichThuocManHinh);
            newProduct.setHinhMinhHoa(hinhMinhHoa);
            dsSanPham.add(newProduct);

            updateProductTable();
            addProductDialog.dispose();
        });
        panel.add(btnAdd, BorderLayout.SOUTH);

        addProductDialog.add(panel);
        addProductDialog.setModal(true);
        addProductDialog.setVisible(true);
    }

    private void showProductDetails(SanPham selectedProduct) {
        JDialog detailsDialog = new JDialog();
        detailsDialog.setTitle("Thông tin chi tiết sản phẩm");
        detailsDialog.setSize(600, 400);
        detailsDialog.setLocationRelativeTo(this);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(12, 2, 10, 10));

        panel.add(new JLabel("Mã SP:"));
        panel.add(new JLabel(selectedProduct.getMaSP()));
        panel.add(new JLabel("Tên sản phẩm:"));
        panel.add(new JLabel(selectedProduct.getTen()));
        panel.add(new JLabel("Hãng:"));
        panel.add(new JLabel(selectedProduct.getHang()));
        panel.add(new JLabel("Giá:"));
        panel.add(new JLabel(formatPrice(selectedProduct.getGia())));
        panel.add(new JLabel("Số lượng:"));
        panel.add(new JLabel(String.valueOf(selectedProduct.getSoLuong())));
        panel.add(new JLabel("Chip:"));
        panel.add(new JLabel(selectedProduct.getChip()));
        panel.add(new JLabel("Số camera:"));
        panel.add(new JLabel(String.valueOf(selectedProduct.getSoCamera())));
        panel.add(new JLabel("Dung lượng pin:"));
        panel.add(new JLabel(String.valueOf(selectedProduct.getDungLuongPin())));
        panel.add(new JLabel("Kích thước màn hình:"));
        panel.add(new JLabel(String.valueOf(selectedProduct.getKichThuocManHinh())));
        panel.add(new JLabel("Hình minh họa:"));
        panel.add(new JLabel(new ImageIcon(selectedProduct.getHinhMinhHoa())));

        JButton btnExit = new JButton("Thoát");
        btnExit.addActionListener(e -> detailsDialog.dispose());
        panel.add(new JLabel());
        panel.add(btnExit);

        detailsDialog.add(panel);
        detailsDialog.setModal(true);
        detailsDialog.setVisible(true);
    }

    private void editProduct(ActionEvent e) {
        // Tạo cửa sổ sửa sản phẩm
    }

    private void deleteProduct(ActionEvent e) {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm cần xóa.");
            return;
        }
        dsSanPham.remove(row);
        updateProductTable();
    }
}
