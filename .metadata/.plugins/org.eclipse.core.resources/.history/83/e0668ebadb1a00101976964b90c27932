package do_an_1;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class PanelHoaDon extends JPanel {
    private List<HoaDon> dsHoaDon;
    private JTable table, tempTable;
    private JTextField txtMaHD, txtMaKH, txtMaSP, txtSoLuong;
    private JButton btnThemSP, btnXoaSP, btnXacNhanHD, btnSuaHD, btnXoaHD;
    private DataManager<HoaDon> dataManager;
    private DataManager<SanPham> spDataManager;
    private DataManager<KhachHang> khDataManager;
    private List<Object[]> tempSanPham;

    private String formatPrice(double price) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(price) + " VND";
    }

    private String generateMaHD() {
        int count = (int) dsHoaDon.stream().map(HoaDon::getMaHD).distinct().count() + 1;
        String newMaHD;
        do {
            newMaHD = "HD" + String.format("%03d", count);
            count++;
        } while (dsHoaDon.stream().anyMatch(hd -> hd.getMaHD().equals(newMaHD)));
        return newMaHD;
    }

    public PanelHoaDon() {
        setBackground(Color.decode("#F8EAD9"));
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        dataManager = new FileDataManager<>();
        spDataManager = new FileDataManager<>();
        khDataManager = new FileDataManager<>();
        dsHoaDon = new ArrayList<>();
        tempSanPham = new ArrayList<>();
        try {
            dsHoaDon = dataManager.loadFromFile("hoadon.dat");
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file hóa đơn: " + e.getMessage());
        }

        // Bảng hiển thị tất cả hóa đơn
        String[] columns = {"Mã HD", "Tên KH", "Tổng tiền", "Ngày lập"};
        Object[][] data = new Object[0][4];
        table = new JTable(data, columns);
        table.setFillsViewportHeight(true);
        JScrollPane tableScrollPane = new JScrollPane(table);
        tableScrollPane.setBorder(BorderFactory.createTitledBorder("Danh sách hóa đơn đã xác nhận"));
        add(tableScrollPane, BorderLayout.CENTER);
        refreshTable();

        // Form nhập liệu
        JPanel formPanel = new JPanel(new BorderLayout());
        formPanel.setBackground(Color.decode("#F8EAD9"));

        // Panel thông tin hóa đơn
        JPanel infoPanel = new JPanel(new GridLayout(2, 2, 5, 5));
        infoPanel.setBackground(Color.decode("#F8EAD9"));
        infoPanel.add(new JLabel("Mã HD:"));
        txtMaHD = new JTextField(generateMaHD());
        txtMaHD.setEditable(false);
        infoPanel.add(txtMaHD);
        infoPanel.add(new JLabel("Mã KH:"));
        txtMaKH = new JTextField();
        infoPanel.add(txtMaKH);

        // Panel thêm sản phẩm
        JPanel spPanel = new JPanel(new GridLayout(4, 2, 5, 5));
        spPanel.setBackground(Color.decode("#F8EAD9"));
        spPanel.setBorder(BorderFactory.createTitledBorder("Thêm sản phẩm"));
        spPanel.add(new JLabel("Mã SP:"));
        txtMaSP = new JTextField();
        spPanel.add(txtMaSP);
        spPanel.add(new JLabel("Số lượng:"));
        txtSoLuong = new JTextField();
        spPanel.add(txtSoLuong);
        btnThemSP = new JButton("Thêm SP");
        btnThemSP.addActionListener(e -> themSanPhamTam());
        spPanel.add(btnThemSP);
        btnXoaSP = new JButton("Xóa SP");
        btnXoaSP.addActionListener(e -> xoaSanPhamTam());
        spPanel.add(btnXoaSP);

        // Bảng tạm hiển thị sản phẩm
        String[] tempColumns = {"Mã SP", "Số lượng", "Giá", "Thành tiền"};
        Object[][] tempData = new Object[0][4];
        tempTable = new JTable(tempData, tempColumns);
        JScrollPane tempScrollPane = new JScrollPane(tempTable);
        tempScrollPane.setBorder(BorderFactory.createTitledBorder("Sản phẩm trong hóa đơn"));

        // Panel nút điều khiển hóa đơn
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.setBackground(Color.decode("#F8EAD9"));
        btnXacNhanHD = new JButton("Xác nhận hóa đơn");
        btnXacNhanHD.addActionListener(e -> xacNhanHoaDon());
        buttonPanel.add(btnXacNhanHD);
        btnSuaHD = new JButton("Sửa hóa đơn");
        btnSuaHD.addActionListener(e -> suaHoaDon());
        buttonPanel.add(btnSuaHD);
        btnXoaHD = new JButton("Xóa hóa đơn");
        btnXoaHD.addActionListener(e -> xoaHoaDon());
        buttonPanel.add(btnXoaHD);

        formPanel.add(infoPanel, BorderLayout.NORTH);
        formPanel.add(spPanel, BorderLayout.CENTER);
        formPanel.add(tempScrollPane, BorderLayout.SOUTH);
        formPanel.add(buttonPanel, BorderLayout.EAST);

        add(formPanel, BorderLayout.NORTH);

        // Sự kiện nhấn chuột vào bảng hóa đơn
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                int row = table.rowAtPoint(e.getPoint());
                if (row != -1) {
                    hienThiChiTietHoaDon(row);
                }
            }
        });

        // Sự kiện chọn hàng trong bảng hóa đơn để sửa
        table.getSelectionModel().addListSelectionListener(e -> {
            int row = table.getSelectedRow();
            if (row != -1 && !e.getValueIsAdjusting()) {
                String maHD = (String) table.getValueAt(row, 0);
                List<HoaDon> hds = dsHoaDon.stream().filter(h -> h.getMaHD().equals(maHD)).toList();
                if (!hds.isEmpty()) {
                    txtMaHD.setText(maHD);
                    txtMaKH.setText(hds.get(0).getMaKH());
                    tempSanPham.clear();
                    try {
                        List<SanPham> dsSanPham = spDataManager.loadFromFile("sanpham.dat");
                        for (HoaDon hd : hds) {
                            String maSP = hd.getTenSP();
                            SanPham sp = dsSanPham.stream()
                                    .filter(p -> p.getMaSP().equals(maSP))
                                    .findFirst()
                                    .orElse(null);
                            double gia = sp != null ? sp.getGia() : hd.getTongTien() / hd.getSoLuong();
                            tempSanPham.add(new Object[]{maSP, hd.getSoLuong(), formatPrice(gia), formatPrice(hd.getTongTien())});
                        }
                        refreshTempTable();
                    } catch (IOException | ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(this, "Lỗi khi đọc file sản phẩm: " + ex.getMessage());
                    }
                }
            }
        });
    }

    private void themSanPhamTam() {
        try {
            String maSP = txtMaSP.getText().trim();
            int soLuong = Integer.parseInt(txtSoLuong.getText().trim());

            if (maSP.isEmpty() || soLuong <= 0) {
                throw new IllegalArgumentException("Vui lòng điền mã SP và số lượng hợp lệ!");
            }

            List<SanPham> dsSanPham = spDataManager.loadFromFile("sanpham.dat");
            SanPham sp = dsSanPham.stream()
                    .filter(p -> p.getMaSP().equals(maSP))
                    .findFirst()
                    .orElseThrow(() -> new IllegalArgumentException("Mã sản phẩm không tồn tại!"));

            if (sp.getSoLuong() < soLuong) {
                throw new IllegalArgumentException("Số lượng vượt quá tồn kho! Còn lại: " + sp.getSoLuong());
            }

            for (Object[] item : tempSanPham) {
                if (item[0].equals(maSP)) {
                    throw new IllegalArgumentException("Sản phẩm đã được thêm, vui lòng chọn sản phẩm khác!");
                }
            }

            double gia = sp.getGia();
            double thanhTien = gia * soLuong;
            tempSanPham.add(new Object[]{maSP, soLuong, formatPrice(gia), formatPrice(thanhTien)});
            refreshTempTable();
            txtMaSP.setText("");
            txtSoLuong.setText("");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số lượng phải là số!");
        } catch (IllegalArgumentException | IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void xoaSanPhamTam() {
        int row = tempTable.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để xóa!");
            return;
        }
        tempSanPham.remove(row);
        refreshTempTable();
        JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!");
    }

    private void xacNhanHoaDon() {
        try {
            String maHD = txtMaHD.getText().trim();
            String maKH = txtMaKH.getText().trim();

            if (maKH.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng nhập mã khách hàng!");
            }

            if (tempSanPham.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng thêm ít nhất một sản phẩm!");
            }

            List<KhachHang> dsKhachHang = khDataManager.loadFromFile("khachhang.dat");
            if (dsKhachHang.stream().noneMatch(kh -> kh.getMaKH().equals(maKH))) {
                throw new IllegalArgumentException("Mã khách hàng không tồn tại!");
            }

            // Kiểm tra nếu mã HD đã tồn tại, xóa các bản ghi cũ
            dsHoaDon.removeIf(hd -> hd.getMaHD().equals(maHD));

            double tongTien = 0;
            List<SanPham> dsSanPham = spDataManager.loadFromFile("sanpham.dat");
            List<HoaDon> newHDs = new ArrayList<>();
            for (Object[] item : tempSanPham) {
                String maSP = (String) item[0];
                int soLuong = (int) item[1];
                SanPham sp = dsSanPham.stream()
                        .filter(p -> p.getMaSP().equals(maSP))
                        .findFirst()
                        .orElseThrow(() -> new IllegalArgumentException("Mã sản phẩm không hợp lệ!"));
                tongTien += sp.getGia() * soLuong;
                sp.setSoLuong(sp.getSoLuong() - soLuong);

                HoaDon hd = new HoaDon(maHD, maKH, maSP, soLuong, sp.getGia() * soLuong, LocalDate.now());
                newHDs.add(hd);
                dsHoaDon.add(hd);
            }

            spDataManager.saveToFile(dsSanPham, "sanpham.dat");
            dataManager.saveToFile(dsHoaDon, "hoadon.dat");
            refreshTable();

            // Hiển thị hóa đơn tổng
            hienThiHoaDonTong(maHD, maKH, newHDs, tongTien);

            tempSanPham.clear();
            refreshTempTable();
            txtMaHD.setText(generateMaHD()); // Tạo mã HD mới
            txtMaKH.setText("");
            txtMaSP.setText("");
            txtSoLuong.setText("");
            JOptionPane.showMessageDialog(this, "Thêm hóa đơn thành công!");
        } catch (IllegalArgumentException | IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void hienThiHoaDonTong(String maHD, String maKH, List<HoaDon> hds, double tongTien) {
        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Hóa đơn tổng", true);
        dialog.setLayout(new BorderLayout());
        dialog.setSize(600, 400);
        dialog.setLocationRelativeTo(this);
        dialog.getContentPane().setBackground(Color.decode("#F8EAD9"));

        JPanel infoPanel = new JPanel(new GridLayout(3, 2, 5, 5));
        infoPanel.setBackground(Color.decode("#F8EAD9"));
        infoPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        infoPanel.add(new JLabel("Mã HD:"));
        infoPanel.add(new JLabel(maHD));

        String tenKH = maKH;
        try {
            List<KhachHang> dsKhachHang = khDataManager.loadFromFile("khachhang.dat");
            tenKH = dsKhachHang.stream()
                    .filter(kh -> kh.getMaKH().equals(maKH))
                    .findFirst()
                    .map(KhachHang::getTenKH)
                    .orElse(maKH);
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file khách hàng: " + e.getMessage());
        }
        infoPanel.add(new JLabel("Tên KH:"));
        infoPanel.add(new JLabel(tenKH));

        infoPanel.add(new JLabel("Ngày lập:"));
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String ngayLap = hds.isEmpty() ? "" : hds.get(0).getNgayLap().format(formatter);
        infoPanel.add(new JLabel(ngayLap));

        JPanel spPanel = new JPanel(new BorderLayout());
        spPanel.setBackground(Color.decode("#F8EAD9"));
        spPanel.setBorder(BorderFactory.createTitledBorder("Danh sách sản phẩm"));

        String[] columns = {"Tên SP", "Số lượng", "Giá", "Thành tiền"};
        Object[][] data = new Object[hds.size()][4];
        try {
            List<SanPham> dsSanPham = spDataManager.loadFromFile("sanpham.dat");
            for (int i = 0; i < hds.size(); i++) {
                HoaDon hd = hds.get(i);
                String maSP = hd.getTenSP();
                SanPham sp = dsSanPham.stream()
                        .filter(p -> p.getMaSP().equals(maSP))
                        .findFirst()
                        .orElse(null);
                String tenSP = sp != null ? sp.getMaSP() : maSP;
                double gia = sp != null ? sp.getGia() : hd.getTongTien() / hd.getSoLuong();
                data[i] = new Object[]{tenSP, hd.getSoLuong(), formatPrice(gia), formatPrice(hd.getTongTien())};
            }
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file sản phẩm: " + e.getMessage());
        }

        JTable spTable = new JTable(data, columns);
        spTable.setFillsViewportHeight(true);
        JScrollPane spScrollPane = new JScrollPane(spTable);
        spPanel.add(spScrollPane, BorderLayout.CENTER);

        JLabel lblTongTien = new JLabel("Tổng tiền: " + formatPrice(tongTien));
        lblTongTien.setHorizontalAlignment(SwingConstants.RIGHT);
        spPanel.add(lblTongTien, BorderLayout.SOUTH);

        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(Color.decode("#F8EAD9"));
        mainPanel.add(infoPanel, BorderLayout.NORTH);
        mainPanel.add(spPanel, BorderLayout.CENTER);

        dialog.add(mainPanel, BorderLayout.CENTER);

        JButton btnDong = new JButton("Đóng");
        btnDong.addActionListener(e -> dialog.dispose());
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.setBackground(Color.decode("#F8EAD9"));
        buttonPanel.add(btnDong);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        dialog.setVisible(true);
    }

    private void suaHoaDon() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hóa đơn để sửa!");
            return;
        }

        try {
            String maHD = txtMaHD.getText().trim();
            String maKH = txtMaKH.getText().trim();

            if (maKH.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng nhập mã khách hàng!");
            }

            if (tempSanPham.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng thêm ít nhất một sản phẩm!");
            }

            List<KhachHang> dsKhachHang = khDataManager.loadFromFile("khachhang.dat");
            if (dsKhachHang.stream().noneMatch(kh -> kh.getMaKH().equals(maKH))) {
                throw new IllegalArgumentException("Mã khách hàng không tồn tại!");
            }

            // Hoàn tồn kho cho các sản phẩm cũ
            List<SanPham> dsSanPham = spDataManager.loadFromFile("sanpham.dat");
            List<HoaDon> oldHDs = dsHoaDon.stream().filter(h -> h.getMaHD().equals(maHD)).toList();
            for (HoaDon hd : oldHDs) {
                String maSP = hd.getTenSP();
                int soLuong = hd.getSoLuong();
                dsSanPham.stream()
                        .filter(p -> p.getMaSP().equals(maSP))
                        .findFirst()
                        .ifPresent(sp -> sp.setSoLuong(sp.getSoLuong() + soLuong));
            }

            // Xóa các bản ghi cũ
            dsHoaDon.removeIf(hd -> hd.getMaHD().equals(maHD));

            // Thêm các bản ghi mới
            double tongTien = 0;
            List<HoaDon> newHDs = new ArrayList<>();
            for (Object[] item : tempSanPham) {
                String maSP = (String) item[0];
                int soLuong = (int) item[1];
                SanPham sp = dsSanPham.stream()
                        .filter(p -> p.getMaSP().equals(maSP))
                        .findFirst()
                        .orElseThrow(() -> new IllegalArgumentException("Mã sản phẩm không hợp lệ!"));
                if (sp.getSoLuong() < soLuong) {
                    throw new IllegalArgumentException("Số lượng vượt quá tồn kho! Còn lại: " + sp.getSoLuong());
                }
                tongTien += sp.getGia() * soLuong;
                sp.setSoLuong(sp.getSoLuong() - soLuong);

                HoaDon hd = new HoaDon(maHD, maKH, maSP, soLuong, sp.getGia() * soLuong, LocalDate.now());
                newHDs.add(hd);
                dsHoaDon.add(hd);
            }

            spDataManager.saveToFile(dsSanPham, "sanpham.dat");
            dataManager.saveToFile(dsHoaDon, "hoadon.dat");
            refreshTable();

            // Hiển thị hóa đơn tổng sau khi sửa
            hienThiHoaDonTong(maHD, maKH, newHDs, tongTien);

            tempSanPham.clear();
            refreshTempTable();
            txtMaHD.setText(generateMaHD()); // Tạo mã HD mới
            txtMaKH.setText("");
            txtMaSP.setText("");
            txtSoLuong.setText("");
            JOptionPane.showMessageDialog(this, "Sửa hóa đơn thành công!");
        } catch (IllegalArgumentException | IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void xoaHoaDon() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hóa đơn để xóa!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa hóa đơn này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                String maHD = (String) table.getValueAt(row, 0);
                List<HoaDon> hds = dsHoaDon.stream().filter(h -> h.getMaHD().equals(maHD)).toList();

                // Hoàn tồn kho
                List<SanPham> dsSanPham = spDataManager.loadFromFile("sanpham.dat");
                for (HoaDon hd : hds) {
                    String maSP = hd.getTenSP();
                    int soLuong = hd.getSoLuong();
                    dsSanPham.stream()
                            .filter(p -> p.getMaSP().equals(maSP))
                            .findFirst()
                            .ifPresent(sp -> sp.setSoLuong(sp.getSoLuong() + soLuong));
                }

                dsHoaDon.removeIf(hd -> hd.getMaHD().equals(maHD));
                spDataManager.saveToFile(dsSanPham, "sanpham.dat");
                dataManager.saveToFile(dsHoaDon, "hoadon.dat");
                refreshTable();
                tempSanPham.clear();
                refreshTempTable();
                txtMaHD.setText(generateMaHD()); // Tạo mã HD mới
                txtMaKH.setText("");
                txtMaSP.setText("");
                txtSoLuong.setText("");
                JOptionPane.showMessageDialog(this, "Xóa hóa đơn thành công!");
            } catch (IOException | ClassNotFoundException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi lưu file: " + e.getMessage());
            }
        }
    }

    private void hienThiChiTietHoaDon(int row) {
        String maHD = (String) table.getValueAt(row, 0);

        JDialog dialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this), "Chi tiết hóa đơn", true);
        dialog.setLayout(new BorderLayout());
        dialog.setSize(600, 400);
        dialog.setLocationRelativeTo(this);
        dialog.getContentPane().setBackground(Color.decode("#F8EAD9"));

        JPanel infoPanel = new JPanel(new GridLayout(4, 2, 5, 5));
        infoPanel.setBackground(Color.decode("#F8EAD9"));
        infoPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        infoPanel.add(new JLabel("Mã HD:"));
        infoPanel.add(new JLabel(maHD));

        List<HoaDon> chiTietHD = dsHoaDon.stream()
                .filter(h -> h.getMaHD().equals(maHD))
                .collect(Collectors.toList());
        String maKH = chiTietHD.isEmpty() ? "" : chiTietHD.get(0).getMaKH();
        String tenKH = maKH;
        try {
            List<KhachHang> dsKhachHang = khDataManager.loadFromFile("khachhang.dat");
            tenKH = dsKhachHang.stream()
                    .filter(kh -> kh.getMaKH().equals(maKH))
                    .findFirst()
                    .map(KhachHang::getTenKH)
                    .orElse(maKH);
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file khách hàng: " + e.getMessage());
        }
        infoPanel.add(new JLabel("Mã KH:"));
        infoPanel.add(new JLabel(maKH));
        infoPanel.add(new JLabel("Tên KH:"));
        infoPanel.add(new JLabel(tenKH));

        infoPanel.add(new JLabel("Ngày lập:"));
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        String ngayLap = chiTietHD.isEmpty() ? "" : chiTietHD.get(0).getNgayLap().format(formatter);
        infoPanel.add(new JLabel(ngayLap));

        JPanel spPanel = new JPanel(new BorderLayout());
        spPanel.setBackground(Color.decode("#F8EAD9"));
        spPanel.setBorder(BorderFactory.createTitledBorder("Danh sách sản phẩm"));

        String[] columns = {"Tên SP", "Số lượng", "Giá", "Thành tiền"};
        Object[][] data = new Object[chiTietHD.size()][4];
        try {
            List<SanPham> dsSanPham = spDataManager.loadFromFile("sanpham.dat");
            for (int i = 0; i < chiTietHD.size(); i++) {
                HoaDon hd = chiTietHD.get(i);
                String maSP = hd.getTenSP();
                SanPham sp = dsSanPham.stream()
                        .filter(p -> p.getMaSP().equals(maSP))
                        .findFirst()
                        .orElse(null);
                String tenSP = sp != null ? sp.getMaSP() : maSP;
                double gia = sp != null ? sp.getGia() : hd.getTongTien() / hd.getSoLuong();
                data[i] = new Object[]{tenSP, hd.getSoLuong(), formatPrice(gia), formatPrice(hd.getTongTien())};
            }
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file sản phẩm: " + e.getMessage());
        }

        JTable spTable = new JTable(data, columns);
        spTable.setFillsViewportHeight(true);
        JScrollPane spScrollPane = new JScrollPane(spTable);
        spPanel.add(spScrollPane, BorderLayout.CENTER);

        double tongTien = chiTietHD.stream().mapToDouble(HoaDon::getTongTien).sum();
        JLabel lblTongTien = new JLabel("Tổng tiền: " + formatPrice(tongTien));
        lblTongTien.setHorizontalAlignment(SwingConstants.RIGHT);
        spPanel.add(lblTongTien, BorderLayout.SOUTH);

        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(Color.decode("#F8EAD9"));
        mainPanel.add(infoPanel, BorderLayout.NORTH);
        mainPanel.add(spPanel, BorderLayout.CENTER);

        dialog.add(mainPanel, BorderLayout.CENTER);

        JButton btnDong = new JButton("Đóng");
        btnDong.addActionListener(e -> dialog.dispose());
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.setBackground(Color.decode("#F8EAD9"));
        buttonPanel.add(btnDong);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        dialog.setVisible(true);
    }

    private void refreshTable() {
        String[] columns = {"Mã HD", "Tên KH", "Tổng tiền", "Ngày lập"};
        int size = (int) dsHoaDon.stream().map(HoaDon::getMaHD).distinct().count();
        Object[][] data = new Object[size][4];
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        int index = 0;
        try {
            List<KhachHang> dsKhachHang = khDataManager.loadFromFile("khachhang.dat");
            for (String maHD : dsHoaDon.stream().map(HoaDon::getMaHD).distinct().toList()) {
                List<HoaDon> hds = dsHoaDon.stream().filter(h -> h.getMaHD().equals(maHD)).toList();
                double tongTien = hds.stream().mapToDouble(HoaDon::getTongTien).sum();
                String maKH = hds.get(0).getMaKH();
                String tenKH = dsKhachHang.stream()
                        .filter(kh -> kh.getMaKH().equals(maKH))
                        .findFirst()
                        .map(KhachHang::getTenKH)
                        .orElse(maKH);
                data[index] = new Object[]{maHD, tenKH, formatPrice(tongTien), hds.get(0).getNgayLap().format(formatter)};
                index++;
            }
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file khách hàng: " + e.getMessage());
        }
        table.setModel(new javax.swing.table.DefaultTableModel(data, columns));
        table.revalidate();
        table.repaint();
    }

    private void refreshTempTable() {
        String[] columns = {"Mã SP", "Số lượng", "Giá", "Thành tiền"};
        Object[][] data = tempSanPham.toArray(new Object[0][0]);
        tempTable.setModel(new javax.swing.table.DefaultTableModel(data, columns));
        tempTable.revalidate();
        tempTable.repaint();
    }
}