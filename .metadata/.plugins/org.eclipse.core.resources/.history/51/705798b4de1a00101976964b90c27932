package do_an_1;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.text.DecimalFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class PanelTimKiem extends JPanel {
    private List<SanPham> dsSanPham;
    private List<KhachHang> dsKhachHang;
    private List<HoaDon> dsHoaDon;
    private JTable table;
    private JTextField txtSearch;
    private JComboBox<String> cbType;
    private DataManager<SanPham> spDataManager;
    private DataManager<KhachHang> khDataManager;
    private DataManager<HoaDon> hdDataManager;

    private String formatPrice(double price) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(price) + " VND";
    }

    public PanelTimKiem() {
        spDataManager = new FileDataManager<>();
        khDataManager = new FileDataManager<>();
        hdDataManager = new FileDataManager<>();

        dsSanPham = new ArrayList<>();
        dsKhachHang = new ArrayList<>();
        dsHoaDon = new ArrayList<>();

        try {
            dsSanPham = spDataManager.loadFromFile("sanpham.dat");
            dsKhachHang = khDataManager.loadFromFile("khachhang.dat");
            dsHoaDon = hdDataManager.loadFromFile("hoadon.dat");
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file: " + e.getMessage());
        }

        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Form tìm kiếm
        JPanel searchPanel = new JPanel(new FlowLayout());
        searchPanel.add(new JLabel("Tìm kiếm:"));
        txtSearch = new JTextField(20);
        searchPanel.add(txtSearch);

        String[] types = {"Sản phẩm", "Khách hàng", "Hóa đơn"};
        cbType = new JComboBox<>(types);
        searchPanel.add(cbType);

        JButton btnSearch = new JButton("Tìm");
        btnSearch.addActionListener(e -> timKiem());
        searchPanel.add(btnSearch);

        add(searchPanel, BorderLayout.NORTH);

        // Bảng hiển thị kết quả
        table = new JTable();
        table.setAutoCreateRowSorter(true);
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) { // Double-click
                    int row = table.getSelectedRow();
                    if (row != -1) {
                        String type = cbType.getSelectedItem().toString();
                        if (type.equals("Sản phẩm")) {
                            showSanPhamDetail(row);
                        } else if (type.equals("Khách hàng")) {
                            showKhachHangDetail(row);
                        } else if (type.equals("Hóa đơn")) {
                            showHoaDonDetail(row);
                        }
                    }
                }
            }
        });
        add(new JScrollPane(table), BorderLayout.CENTER);
    }

    private void timKiem() {
        String keyword = txtSearch.getText().toLowerCase();
        String type = cbType.getSelectedItem().toString();

        if (type.equals("Sản phẩm")) {
            String[] columns = {"Mã SP", "Tên", "Hãng", "Giá", "Số lượng", "Chip", "Số camera", "Pin (mAh)", "Màn hình (inch)"};
            List<Object[]> dataList = new ArrayList<>();
            for (SanPham sp : dsSanPham) {
                if (sp.getMaSP().toLowerCase().contains(keyword) || 
                    sp.getTen().toLowerCase().contains(keyword) || 
                    sp.getHang().toLowerCase().contains(keyword)) {
                    dataList.add(new Object[]{sp.getMaSP(), sp.getTen(), sp.getHang(), formatPrice(sp.getGia()), sp.getSoLuong(), sp.getChip(), sp.getSoCamera(), sp.getDungLuongPin(), sp.getKichThuocManHinh()});
                }
            }
            Object[][] data = dataList.toArray(new Object[0][]);
            table.setModel(new DefaultTableModel(data, columns));
        } else if (type.equals("Khách hàng")) {
            String[] columns = {"Mã KH", "Tên KH", "SĐT"};
            List<Object[]> dataList = new ArrayList<>();
            for (KhachHang kh : dsKhachHang) {
                if (kh.getMaKH().toLowerCase().contains(keyword) || kh.getTenKH().toLowerCase().contains(keyword)) {
                    dataList.add(new Object[]{kh.getMaKH(), kh.getTenKH(), kh.getSdt()});
                }
            }
            Object[][] data = dataList.toArray(new Object[0][]);
            table.setModel(new DefaultTableModel(data, columns));
        } else if (type.equals("Hóa đơn")) {
            String[] columns = {"Mã HD", "Mã KH", "Mã SP", "Số lượng", "Tổng tiền", "Ngày lập"};
            List<Object[]> dataList = new ArrayList<>();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            for (HoaDon hd : dsHoaDon) {
                if (hd.getMaHD().toLowerCase().contains(keyword) || 
                    hd.getMaKH().toLowerCase().contains(keyword) || 
                    hd.getTenSP().toLowerCase().contains(keyword)) {
                    dataList.add(new Object[]{hd.getMaHD(), hd.getMaKH(), hd.getTenSP(), hd.getSoLuong(), formatPrice(hd.getTongTien()), hd.getNgayLap().format(formatter)});
                }
            }
            Object[][] data = dataList.toArray(new Object[0][]);
            table.setModel(new DefaultTableModel(data, columns));
        }
    }

    private void showSanPhamDetail(int row) {
        String maSP = (String) table.getValueAt(row, 0);
        SanPham sp = dsSanPham.stream()
                .filter(p -> p.getMaSP().equals(maSP))
                .findFirst()
                .orElse(null);

        if (sp == null) return;

        JDialog dialog = new JDialog(SwingUtilities.getWindowAncestor(this), "Chi tiết sản phẩm", Dialog.ModalityType.APPLICATION_MODAL);
        dialog.setLayout(new BorderLayout(10, 10));
        dialog.setSize(500, 350);
        dialog.setLocationRelativeTo(this);

        // Hình ảnh sản phẩm bên trái
        JLabel imageLabel = new JLabel();
        try {
            ImageIcon imageIcon = new ImageIcon("images/" + sp.getHinhMinhHoa());
            Image scaledImage = imageIcon.getImage().getScaledInstance(200, 250, Image.SCALE_SMOOTH);
            imageLabel.setIcon(new ImageIcon(scaledImage));
        } catch (Exception e) {
            imageLabel.setText("Không tải được hình ảnh");
        }
        imageLabel.setHorizontalAlignment(JLabel.CENTER);
        dialog.add(imageLabel, BorderLayout.WEST);

        // Thông tin chi tiết bên phải
        JPanel infoPanel = new JPanel(new GridLayout(9, 2, 10, 10));
        infoPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        infoPanel.add(new JLabel("Mã SP:"));
        infoPanel.add(new JLabel(sp.getMaSP()));
        infoPanel.add(new JLabel("Tên:"));
        infoPanel.add(new JLabel(sp.getTen()));
        infoPanel.add(new JLabel("Hãng:"));
        infoPanel.add(new JLabel(sp.getHang()));
        infoPanel.add(new JLabel("Giá:"));
        infoPanel.add(new JLabel(formatPrice(sp.getGia())));
        infoPanel.add(new JLabel("Số lượng:"));
        infoPanel.add(new JLabel(String.valueOf(sp.getSoLuong())));
        infoPanel.add(new JLabel("Chip:"));
        infoPanel.add(new JLabel(sp.getChip()));
        infoPanel.add(new JLabel("Số camera:"));
        infoPanel.add(new JLabel(String.valueOf(sp.getSoCamera())));
        infoPanel.add(new JLabel("Dung lượng pin (mAh):"));
        infoPanel.add(new JLabel(String.valueOf(sp.getDungLuongPin())));
        infoPanel.add(new JLabel("Kích thước màn hình (inch):"));
        infoPanel.add(new JLabel(String.valueOf(sp.getKichThuocManHinh())));
        dialog.add(infoPanel, BorderLayout.CENTER);

        // Nút Đóng ở dưới
        JButton btnClose = new JButton("Đóng");
        btnClose.addActionListener(e -> dialog.dispose());
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.add(btnClose);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        dialog.setVisible(true);
    }

    private void showKhachHangDetail(int row) {
        String maKH = (String) table.getValueAt(row, 0);
        KhachHang kh = dsKhachHang.stream()
                .filter(k -> k.getMaKH().equals(maKH))
                .findFirst()
                .orElse(null);

        if (kh == null) return;

        JDialog dialog = new JDialog(SwingUtilities.getWindowAncestor(this), "Chi tiết khách hàng", Dialog.ModalityType.APPLICATION_MODAL);
        dialog.setLayout(new BorderLayout());
        dialog.setSize(600, 400);
        dialog.setLocationRelativeTo(this);

        // Thông tin khách hàng
        JPanel infoPanel = new JPanel(new GridLayout(3, 2, 10, 10));
        infoPanel.add(new JLabel("Mã KH:"));
        infoPanel.add(new JLabel(kh.getMaKH()));
        infoPanel.add(new JLabel("Tên KH:"));
        infoPanel.add(new JLabel(kh.getTenKH()));
        infoPanel.add(new JLabel("SĐT:"));
        infoPanel.add(new JLabel(kh.getSdt()));
        dialog.add(infoPanel, BorderLayout.NORTH);

        // Lịch sử mua hàng
        String[] columns = {"Mã HD", "Mã SP", "Số lượng", "Tổng tiền", "Ngày lập"};
        List<Object[]> dataList = new ArrayList<>();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        for (HoaDon hd : dsHoaDon) {
            if (hd.getMaKH().equals(maKH)) {
                dataList.add(new Object[]{hd.getMaHD(), hd.getTenSP(), hd.getSoLuong(), formatPrice(hd.getTongTien()), hd.getNgayLap().format(formatter)});
            }
        }
        Object[][] data = dataList.toArray(new Object[0][]);
        JTable historyTable = new JTable(new DefaultTableModel(data, columns));
        dialog.add(new JScrollPane(historyTable), BorderLayout.CENTER);

        dialog.setVisible(true);
    }

    private void showHoaDonDetail(int row) {
        String maHD = (String) table.getValueAt(row, 0);
        HoaDon hd = dsHoaDon.stream()
                .filter(h -> h.getMaHD().equals(maHD))
                .findFirst()
                .orElse(null);

        if (hd == null) return;

        JDialog dialog = new JDialog(SwingUtilities.getWindowAncestor(this), "Chi tiết hóa đơn", Dialog.ModalityType.APPLICATION_MODAL);
        dialog.setLayout(new GridLayout(6, 2, 10, 10));
        dialog.setSize(400, 250);
        dialog.setLocationRelativeTo(this);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        dialog.add(new JLabel("Mã HD:"));
        dialog.add(new JLabel(hd.getMaHD()));
        dialog.add(new JLabel("Mã KH:"));
        dialog.add(new JLabel(hd.getMaKH()));
        dialog.add(new JLabel("Mã SP:"));
        dialog.add(new JLabel(hd.getTenSP()));
        dialog.add(new JLabel("Số lượng:"));
        dialog.add(new JLabel(String.valueOf(hd.getSoLuong())));
        dialog.add(new JLabel("Tổng tiền:"));
        dialog.add(new JLabel(formatPrice(hd.getTongTien())));
        dialog.add(new JLabel("Ngày lập:"));
        dialog.add(new JLabel(hd.getNgayLap().format(formatter)));

        dialog.setVisible(true);
    }
}