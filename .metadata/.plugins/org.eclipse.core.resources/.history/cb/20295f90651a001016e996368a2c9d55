package do_an_1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class PanelSanPham extends JPanel {
    private List<SanPham> dsSanPham;
    private JTable table;
    private JTextField txtMaSP, txtTen, txtHang, txtGia, txtSoLuong, txtChip, txtSoCamera, txtDungLuongPin, txtKichThuocManHinh;
    private JTextField txtHinhMinhHoa;
    private JPanel formPanel;
    private DataManager<SanPham> dataManager;
    private DataManager<HoaDon> hoaDonDataManager;
    private boolean isEditing = false;

    private String formatPrice(double price) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(price) + " VND";
    }

    public PanelSanPham() {
        setBackground(Color.decode("#F8EAD9"));
        setLayout(new BorderLayout());
        setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        dataManager = new FileDataManager<>();
        hoaDonDataManager = new FileDataManager<>();
        dsSanPham = new ArrayList<>();
        try {
            dsSanPham = dataManager.loadFromFile("sanpham.dat");
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi đọc file sản phẩm: " + e.getMessage());
        }

        // Nút điều khiển
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton btnShowForm = new JButton("Thêm sản phẩm");
        JButton btnSua = new JButton("Sửa sản phẩm");
        JButton btnXoa = new JButton("Xóa sản phẩm");

        btnShowForm.addActionListener(e -> {
            formPanel.setVisible(true);
            clearForm();
            isEditing = false;
        });
        btnSua.addActionListener(e -> chuanBiSuaSanPham());
        btnXoa.addActionListener(e -> xoaSanPham());

        buttonPanel.add(btnShowForm);
        buttonPanel.add(btnSua);
        buttonPanel.add(btnXoa);
        add(buttonPanel, BorderLayout.NORTH);

        // Bảng hiển thị sản phẩm
        String[] columns = {"Mã SP", "Tên", "Hãng", "Giá", "Số lượng", "Đã bán"};
        Object[][] data = new Object[dsSanPham.size()][6];
        for (int i = 0; i < dsSanPham.size(); i++) {
            SanPham sp = dsSanPham.get(i);
            int soLuongDaBan = tinhSoLuongDaBan(sp.getMaSP());
            data[i] = new Object[]{sp.getMaSP(), sp.getTen(), sp.getHang(), formatPrice(sp.getGia()), sp.getSoLuong(), soLuongDaBan};
        }
        table = new JTable(data, columns);
        table.setFillsViewportHeight(true);
        JScrollPane tableScrollPane = new JScrollPane(table);
        add(tableScrollPane, BorderLayout.CENTER);

        // Form nhập liệu
        formPanel = new JPanel(new GridLayout(11, 2, 5, 5));
        formPanel.add(new JLabel("Mã SP:"));
        txtMaSP = new JTextField();
        formPanel.add(txtMaSP);
        formPanel.add(new JLabel("Tên:"));
        txtTen = new JTextField();
        formPanel.add(txtTen);
        formPanel.add(new JLabel("Hãng:"));
        txtHang = new JTextField();
        formPanel.add(txtHang);
        formPanel.add(new JLabel("Giá:"));
        txtGia = new JTextField();
        formPanel.add(txtGia);
        formPanel.add(new JLabel("Số lượng:"));
        txtSoLuong = new JTextField();
        formPanel.add(txtSoLuong);
        formPanel.add(new JLabel("Chip:"));
        txtChip = new JTextField();
        formPanel.add(txtChip);
        formPanel.add(new JLabel("Số camera:"));
        txtSoCamera = new JTextField();
        formPanel.add(txtSoCamera);
        formPanel.add(new JLabel("Dung lượng pin (mAh):"));
        txtDungLuongPin = new JTextField();
        formPanel.add(txtDungLuongPin);
        formPanel.add(new JLabel("Kích thước màn hình (inch):"));
        txtKichThuocManHinh = new JTextField();
        formPanel.add(txtKichThuocManHinh);

        // Thêm panel con cho hình minh họa
        formPanel.add(new JLabel("Hình minh họa:"));
        JPanel hinhPanel = new JPanel(new BorderLayout());
        txtHinhMinhHoa = new JTextField();
        txtHinhMinhHoa.setEditable(false);
        JButton btnChonAnh = new JButton("Chọn ảnh");
        btnChonAnh.addActionListener(e -> chonAnh());
        hinhPanel.add(txtHinhMinhHoa, BorderLayout.CENTER);
        hinhPanel.add(btnChonAnh, BorderLayout.EAST);
        formPanel.add(hinhPanel);

        JPanel formButtonPanel = new JPanel(new FlowLayout());
        JButton btnThem = new JButton("Xác nhận");
        JButton btnHuy = new JButton("Hủy");
        JButton btnThoat = new JButton("Thoát");

        btnThem.addActionListener(e -> {
            if (isEditing) {
                suaSanPham();
            } else {
                themSanPham();
            }
        });
        btnHuy.addActionListener(e -> {
            formPanel.setVisible(false);
            clearForm();
            isEditing = false;
        });
        btnThoat.addActionListener(e -> {
            formPanel.setVisible(false);
            clearForm();
            isEditing = false;
        });

        formButtonPanel.add(btnThem);
        formButtonPanel.add(btnHuy);
        formButtonPanel.add(btnThoat);
        formPanel.add(new JLabel(""));
        formPanel.add(formButtonPanel);

        add(formPanel, BorderLayout.WEST);
        formPanel.setVisible(false);

        // Sự kiện nhấn đúp chuột vào bảng để hiển thị chi tiết
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) { // Nhấn đúp
                    int row = table.rowAtPoint(e.getPoint());
                    if (row != -1) {
                        hienThiChiTietSanPham(row);
                    }
                } else {
                    int row = table.rowAtPoint(e.getPoint());
                    if (row == -1) {
                        formPanel.setVisible(false);
                        clearForm();
                        isEditing = false;
                    }
                }
            }
        });

        refreshTable();
    }

    private void hienThiChiTietSanPham(int row) {
        SanPham sp = dsSanPham.get(row);
        JDialog dialog = new JDialog(SwingUtilities.getWindowAncestor(this), "Chi tiết sản phẩm", Dialog.ModalityType.APPLICATION_MODAL);
        dialog.setSize(400, 500);
        dialog.setLocationRelativeTo(this);
        dialog.setLayout(new BorderLayout(10, 10));
        dialog.getContentPane().setBackground(Color.decode("#F8EAD9"));

        // Panel chính chứa thông tin
        JPanel infoPanel = new JPanel(new GridBagLayout());
        infoPanel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 10, 5, 10);
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // Thêm thông tin sản phẩm
        Font labelFont = new Font("Arial", Font.PLAIN, 14);
        Font valueFont = new Font("Arial", Font.BOLD, 14);

        int y = 0;
        gbc.gridx = 0; gbc.gridy = y; gbc.weightx = 0;
        JLabel lblMaSP = new JLabel("Mã SP:");
        lblMaSP.setFont(labelFont);
        infoPanel.add(lblMaSP, gbc);
        gbc.gridx = 1; gbc.weightx = 1;
        JLabel lblChiTietMaSP = new JLabel(sp.getMaSP());
        lblChiTietMaSP.setFont(valueFont);
        infoPanel.add(lblChiTietMaSP, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblTen = new JLabel("Tên:");
        lblTen.setFont(labelFont);
        infoPanel.add(lblTen, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietTen = new JLabel(sp.getTen());
        lblChiTietTen.setFont(valueFont);
        infoPanel.add(lblChiTietTen, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblHang = new JLabel("Hãng:");
        lblHang.setFont(labelFont);
        infoPanel.add(lblHang, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietHang = new JLabel(sp.getHang());
        lblChiTietHang.setFont(valueFont);
        infoPanel.add(lblChiTietHang, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblGia = new JLabel("Giá:");
        lblGia.setFont(labelFont);
        infoPanel.add(lblGia, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietGia = new JLabel(formatPrice(sp.getGia()));
        lblChiTietGia.setFont(valueFont);
        infoPanel.add(lblChiTietGia, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblSoLuong = new JLabel("Số lượng:");
        lblSoLuong.setFont(labelFont);
        infoPanel.add(lblSoLuong, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietSoLuong = new JLabel(String.valueOf(sp.getSoLuong()));
        lblChiTietSoLuong.setFont(valueFont);
        infoPanel.add(lblChiTietSoLuong, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblSoLuongDaBan = new JLabel("Đã bán:");
        lblSoLuongDaBan.setFont(labelFont);
        infoPanel.add(lblSoLuongDaBan, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietSoLuongDaBan = new JLabel(String.valueOf(tinhSoLuongDaBan(sp.getMaSP())));
        lblChiTietSoLuongDaBan.setFont(valueFont);
        infoPanel.add(lblChiTietSoLuongDaBan, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblChip = new JLabel("Chip:");
        lblChip.setFont(labelFont);
        infoPanel.add(lblChip, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietChip = new JLabel(sp.getChip());
        lblChiTietChip.setFont(valueFont);
        infoPanel.add(lblChiTietChip, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblSoCamera = new JLabel("Số camera:");
        lblSoCamera.setFont(labelFont);
        infoPanel.add(lblSoCamera, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietSoCamera = new JLabel(String.valueOf(sp.getSoCamera()));
        lblChiTietSoCamera.setFont(valueFont);
        infoPanel.add(lblChiTietSoCamera, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblDungLuongPin = new JLabel("Pin (mAh):");
        lblDungLuongPin.setFont(labelFont);
        infoPanel.add(lblDungLuongPin, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietDungLuongPin = new JLabel(String.valueOf(sp.getDungLuongPin()));
        lblChiTietDungLuongPin.setFont(valueFont);
        infoPanel.add(lblChiTietDungLuongPin, gbc);

        gbc.gridx = 0; gbc.gridy = ++y;
        JLabel lblKichThuocManHinh = new JLabel("Màn hình (inch):");
        lblKichThuocManHinh.setFont(labelFont);
        infoPanel.add(lblKichThuocManHinh, gbc);
        gbc.gridx = 1;
        JLabel lblChiTietKichThuocManHinh = new JLabel(String.valueOf(sp.getKichThuocManHinh()));
        lblChiTietKichThuocManHinh.setFont(valueFont);
        infoPanel.add(lblChiTietKichThuocManHinh, gbc);

        // Hiển thị hình minh họa
        gbc.gridx = 0; gbc.gridy = ++y; gbc.gridwidth = 2; gbc.anchor = GridBagConstraints.CENTER;
        JLabel lblHinhMinhHoa = new JLabel();
        if (sp.getHinhMinhHoa() != null && !sp.getHinhMinhHoa().isEmpty()) {
            try {
                ImageIcon icon = new ImageIcon(sp.getHinhMinhHoa());
                Image scaledImage = icon.getImage().getScaledInstance(150, 150, Image.SCALE_SMOOTH);
                lblHinhMinhHoa.setIcon(new ImageIcon(scaledImage));
            } catch (Exception ex) {
                lblHinhMinhHoa.setText("Lỗi tải hình");
            }
        } else {
            lblHinhMinhHoa.setText("Không có hình");
        }
        infoPanel.add(lblHinhMinhHoa, gbc);

        dialog.add(new JScrollPane(infoPanel), BorderLayout.CENTER);

        // Nút Đóng
        JPanel buttonPanelDialog = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        JButton btnDong = new JButton("Đóng");
        btnDong.addActionListener(e -> dialog.dispose());
        buttonPanelDialog.add(btnDong);
        dialog.add(buttonPanelDialog, BorderLayout.SOUTH);

        dialog.setVisible(true);
    }

    private void chonAnh() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image files", "jpg", "png", "jpeg"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtHinhMinhHoa.setText(selectedFile.getAbsolutePath());
        }
    }

    private void themSanPham() {
        try {
            String maSP = txtMaSP.getText();
            String ten = txtTen.getText();
            String hang = txtHang.getText();
            double gia = Double.parseDouble(txtGia.getText());
            int soLuong = Integer.parseInt(txtSoLuong.getText());
            String chip = txtChip.getText();
            int soCamera = Integer.parseInt(txtSoCamera.getText());
            int dungLuongPin = Integer.parseInt(txtDungLuongPin.getText());
            double kichThuocManHinh = Double.parseDouble(txtKichThuocManHinh.getText());
            String hinhMinhHoa = txtHinhMinhHoa.getText();

            if (maSP.isEmpty() || ten.isEmpty() || hang.isEmpty() || chip.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng điền đầy đủ thông tin bắt buộc!");
            }

            if (dsSanPham.stream().anyMatch(sp -> sp.getMaSP().equals(maSP))) {
                throw new IllegalArgumentException("Mã sản phẩm đã tồn tại!");
            }

            SanPham sp = new SanPham(maSP, ten, hang, gia, soLuong, chip, soCamera, dungLuongPin, kichThuocManHinh);
            sp.setHinhMinhHoa(hinhMinhHoa);
            dsSanPham.add(sp);
            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            refreshTable();
            formPanel.setVisible(false);
            clearForm();
            JOptionPane.showMessageDialog(this, "Thêm sản phẩm thành công!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá, số lượng, số camera, dung lượng pin và kích thước màn hình phải là số!");
        } catch (IllegalArgumentException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void chuanBiSuaSanPham() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để sửa!");
            return;
        }

        SanPham sp = dsSanPham.get(row);
        txtMaSP.setText(sp.getMaSP());
        txtTen.setText(sp.getTen());
        txtHang.setText(sp.getHang());
        txtGia.setText(String.valueOf(sp.getGia()));
        txtSoLuong.setText(String.valueOf(sp.getSoLuong()));
        txtChip.setText(sp.getChip());
        txtSoCamera.setText(String.valueOf(sp.getSoCamera()));
        txtDungLuongPin.setText(String.valueOf(sp.getDungLuongPin()));
        txtKichThuocManHinh.setText(String.valueOf(sp.getKichThuocManHinh()));
        txtHinhMinhHoa.setText(sp.getHinhMinhHoa() != null ? sp.getHinhMinhHoa() : "");
        formPanel.setVisible(true);
        isEditing = true;
    }

    private void suaSanPham() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để sửa!");
            return;
        }

        try {
            String maSP = txtMaSP.getText();
            String ten = txtTen.getText();
            String hang = txtHang.getText();
            double gia = Double.parseDouble(txtGia.getText());
            int soLuong = Integer.parseInt(txtSoLuong.getText());
            String chip = txtChip.getText();
            int soCamera = Integer.parseInt(txtSoCamera.getText());
            int dungLuongPin = Integer.parseInt(txtDungLuongPin.getText());
            double kichThuocManHinh = Double.parseDouble(txtKichThuocManHinh.getText());
            String hinhMinhHoa = txtHinhMinhHoa.getText();

            if (maSP.isEmpty() || ten.isEmpty() || hang.isEmpty() || chip.isEmpty()) {
                throw new IllegalArgumentException("Vui lòng điền đầy đủ thông tin bắt buộc!");
            }

            if (dsSanPham.stream().anyMatch(sp -> sp.getMaSP().equals(maSP) && !sp.getMaSP().equals(dsSanPham.get(row).getMaSP()))) {
                throw new IllegalArgumentException("Mã sản phẩm đã tồn tại!");
            }

            SanPham sp = dsSanPham.get(row);
            sp.setMaSP(maSP);
            sp.setTen(ten);
            sp.setHang(hang);
            sp.setGia(gia);
            sp.setSoLuong(soLuong);
            sp.setChip(chip);
            sp.setSoCamera(soCamera);
            sp.setDungLuongPin(dungLuongPin);
            sp.setKichThuocManHinh(kichThuocManHinh);
            sp.setHinhMinhHoa(hinhMinhHoa);

            dataManager.saveToFile(dsSanPham, "sanpham.dat");
            refreshTable();
            formPanel.setVisible(false);
            clearForm();
            isEditing = false;
            JOptionPane.showMessageDialog(this, "Sửa sản phẩm thành công!");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Giá, số lượng, số camera, dung lượng pin và kích thước màn hình phải là số!");
        } catch (IllegalArgumentException | IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void xoaSanPham() {
        int row = table.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm để xóa!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa sản phẩm này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try {
                dsSanPham.remove(row);
                dataManager.saveToFile(dsSanPham, "sanpham.dat");
                refreshTable();
                formPanel.setVisible(false);
                clearForm();
                JOptionPane.showMessageDialog(this, "Xóa sản phẩm thành công!");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Lỗi khi lưu file: " + e.getMessage());
            }
        }
    }

    private int tinhSoLuongDaBan(String maSP) {
        try {
            List<HoaDon> dsHoaDon = hoaDonDataManager.loadFromFile("hoadon.dat");
            return dsHoaDon.stream()
                    .filter(hd -> hd.getTenSP().equals(maSP))
                    .mapToInt(HoaDon::getSoLuong)
                    .sum();
        } catch (IOException | ClassNotFoundException e) {
            return 0;
        }
    }

    private void refreshTable() {
        String[] columns = {"Mã SP", "Tên", "Hãng", "Giá", "Số lượng", "Đã bán"};
        Object[][] data = new Object[dsSanPham.size()][6];
        for (int i = 0; i < dsSanPham.size(); i++) {
            SanPham sp = dsSanPham.get(i);
            int soLuongDaBan = tinhSoLuongDaBan(sp.getMaSP());
            data[i] = new Object[]{sp.getMaSP(), sp.getTen(), sp.getHang(), formatPrice(sp.getGia()), sp.getSoLuong(), soLuongDaBan};
        }
        table.setModel(new javax.swing.table.DefaultTableModel(data, columns));
        table.revalidate();
        table.repaint();
    }

    private void clearForm() {
        txtMaSP.setText("");
        txtTen.setText("");
        txtHang.setText("");
        txtGia.setText("");
        txtSoLuong.setText("");
        txtChip.setText("");
        txtSoCamera.setText("");
        txtDungLuongPin.setText("");
        txtKichThuocManHinh.setText("");
        txtHinhMinhHoa.setText("");
    }
}